// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Show Menu Page should match snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RenderMenuContainer
    dispatch={[Function]}
    history={
      Object {
        "push": [Function],
      }
    }
    menu={
      Object {
        "description": "This is a test menu",
        "kitchen": Object {
          "description": "This is my test menu",
          "id": 3,
          "name": "This is great",
        },
        "meals": Array [
          Object {
            "description": "",
            "kitchenId": 2,
            "name": "This is a menu",
            "price": 5000,
          },
        ],
        "name": "Test Menu",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <MenuPage
          menu={
            Object {
              "description": "This is a test menu",
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meals": Array [
                Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
              ],
              "name": "Test Menu",
            }
          }
        />,
        false,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "menu": Object {
            "description": "This is a test menu",
            "kitchen": Object {
              "description": "This is my test menu",
              "id": 3,
              "name": "This is great",
            },
            "meals": Array [
              Object {
                "description": "",
                "kitchenId": 2,
                "name": "This is a menu",
                "price": 5000,
              },
            ],
            "name": "Test Menu",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      false,
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <MenuPage
            menu={
              Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              }
            }
          />,
          false,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "menu": Object {
              "description": "This is a test menu",
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meals": Array [
                Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
              ],
              "name": "Test Menu",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        false,
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`Show Menu Page should render menu received as props Single Meal Card Component should match UI Snapshot  1`] = `
ReactWrapper {
  "length": 1,
  Symbol(enzyme.__unrendered__): <SingleMealCardContainer
    dispatch={[Function]}
    history={
      Object {
        "push": [Function],
      }
    }
    kitchen={
      Object {
        "description": "This is my test menu",
        "id": 3,
        "name": "This is great",
      }
    }
    meal={
      Object {
        "description": "",
        "kitchenId": 2,
        "name": "This is a menu",
        "price": 5000,
      }
    }
    renderEditable={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": SingleMealCardContainer {
      "_reactInternalFiber": FiberNode {
        "_debugID": 10,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 9,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meal": Object {
                "description": "",
                "kitchenId": 2,
                "name": "This is a menu",
                "price": 5000,
              },
              "renderEditable": false,
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meal": Object {
                "description": "",
                "kitchenId": 2,
                "name": "This is a menu",
                "price": 5000,
              },
              "renderEditable": false,
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meal": Object {
                "description": "",
                "kitchenId": 2,
                "name": "This is a menu",
                "price": 5000,
              },
              "renderEditable": false,
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 7,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="display-menu-item"
                  >
                    <div
                      class="order-add-item"
                    >
                      <img
                        alt="This is a menu"
                        class="main-meal-item-img"
                        id="image-undefined"
                        src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                      />
                      <div
                        class="change-preview-image modifiableundefined"
                        style="opacity: 0; z-index: -1; display: none;"
                      >
                        <p
                          class="label-for-input"
                        >
                           Click to change Image 
                        </p>
                        <input
                          accept=".jpg, .png, .jpeg"
                          class="input-file image-undefined"
                          name="input-file"
                          type="file"
                        />
                      </div>
                    </div>
                    <div
                      class="item-details"
                    >
                      <div
                        class="item-title-and-description"
                      >
                        <p
                          class="item-title-main editable editableundefined"
                        >
                           
                          This is a menu
                           
                        </p>
                        <p
                          class="item-description editable editableundefined"
                        >
                           
                          
                           
                        </p>
                      </div>
                      <div
                        class="buttons-array-and-togglers"
                      >
                        <p
                          class="option-options"
                        >
                           Order 
                        </p>
                        <p
                          class="option-options2"
                        >
                           N
                          5000
                           
                        </p>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "treeBaseTime": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "expirationTime": 1,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "dispatch": [Function],
                          "history": Object {
                            "push": [Function],
                          },
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meal": Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                          "renderEditable": false,
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "dispatch": [Function],
                          "history": Object {
                            "push": [Function],
                          },
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meal": Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                          "renderEditable": false,
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "effectTag": 32,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "dispatch": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meal": Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                    "renderEditable": false,
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="display-menu-item"
                >
                  <div
                    class="order-add-item"
                  >
                    <img
                      alt="This is a menu"
                      class="main-meal-item-img"
                      id="image-undefined"
                      src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                    />
                    <div
                      class="change-preview-image modifiableundefined"
                      style="opacity: 0; z-index: -1; display: none;"
                    >
                      <p
                        class="label-for-input"
                      >
                         Click to change Image 
                      </p>
                      <input
                        accept=".jpg, .png, .jpeg"
                        class="input-file image-undefined"
                        name="input-file"
                        type="file"
                      />
                    </div>
                  </div>
                  <div
                    class="item-details"
                  >
                    <div
                      class="item-title-and-description"
                    >
                      <p
                        class="item-title-main editable editableundefined"
                      >
                         
                        This is a menu
                         
                      </p>
                      <p
                        class="item-description editable editableundefined"
                      >
                         
                        
                         
                      </p>
                    </div>
                    <div
                      class="buttons-array-and-togglers"
                    >
                      <p
                        class="option-options"
                      >
                         Order 
                      </p>
                      <p
                        class="option-options2"
                      >
                         N
                        5000
                         
                      </p>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "treeBaseTime": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "dispatch": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meal": Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                      "renderEditable": false,
                    }
                  }
                />,
              },
              "expirationTime": 0,
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseTime": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meal": Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
                "renderEditable": false,
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meal": Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
                "renderEditable": false,
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseTime": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 11,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 12,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 13,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 15,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": null,
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "alt": "This is a menu",
                  "className": "main-meal-item-img",
                  "id": "image-undefined",
                  "src": "https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "alt": "This is a menu",
                  "className": "main-meal-item-img",
                  "id": "image-undefined",
                  "src": "https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseTime": 0,
                "sibling": FiberNode {
                  "_debugID": 16,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 17,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": " Click to change Image ",
                      "className": "label-for-input",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": " Click to change Image ",
                      "className": "label-for-input",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseTime": 0,
                    "sibling": FiberNode {
                      "_debugID": 18,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "accept": ".jpg, .png, .jpeg",
                        "className": "input-file image-undefined",
                        "name": "input-file",
                        "onChange": [Function],
                        "type": "file",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "accept": ".jpg, .png, .jpeg",
                        "className": "input-file image-undefined",
                        "name": "input-file",
                        "onChange": [Function],
                        "type": "file",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseTime": 0,
                      "sibling": null,
                      "stateNode": <input
                        accept=".jpg, .png, .jpeg"
                        class="input-file image-undefined"
                        name="input-file"
                        type="file"
                      />,
                      "tag": 5,
                      "treeBaseTime": 0,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "stateNode": <p
                      class="label-for-input"
                    >
                       Click to change Image 
                    </p>,
                    "tag": 5,
                    "treeBaseTime": 0,
                    "type": "p",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <p
                        className="label-for-input"
                      >
                         Click to change Image 
                      </p>,
                      <input
                        accept=".jpg, .png, .jpeg"
                        className="input-file image-undefined"
                        name="input-file"
                        onChange={[Function]}
                        type="file"
                      />,
                    ],
                    "className": "change-preview-image modifiableundefined",
                    "style": Object {
                      "display": "none",
                      "opacity": 0,
                      "zIndex": -1,
                    },
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <p
                        className="label-for-input"
                      >
                         Click to change Image 
                      </p>,
                      <input
                        accept=".jpg, .png, .jpeg"
                        className="input-file image-undefined"
                        name="input-file"
                        onChange={[Function]}
                        type="file"
                      />,
                    ],
                    "className": "change-preview-image modifiableundefined",
                    "style": Object {
                      "display": "none",
                      "opacity": 0,
                      "zIndex": -1,
                    },
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseTime": 0,
                  "sibling": null,
                  "stateNode": <div
                    class="change-preview-image modifiableundefined"
                    style="opacity: 0; z-index: -1; display: none;"
                  >
                    <p
                      class="label-for-input"
                    >
                       Click to change Image 
                    </p>
                    <input
                      accept=".jpg, .png, .jpeg"
                      class="input-file image-undefined"
                      name="input-file"
                      type="file"
                    />
                  </div>,
                  "tag": 5,
                  "treeBaseTime": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <img
                  alt="This is a menu"
                  class="main-meal-item-img"
                  id="image-undefined"
                  src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                />,
                "tag": 5,
                "treeBaseTime": 0,
                "type": "img",
                "updateQueue": null,
              },
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <img
                    alt="This is a menu"
                    className="main-meal-item-img"
                    id="image-undefined"
                    src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                  />,
                  <div
                    className="change-preview-image modifiableundefined"
                    style={
                      Object {
                        "display": "none",
                        "opacity": 0,
                        "zIndex": -1,
                      }
                    }
                  >
                    <p
                      className="label-for-input"
                    >
                       Click to change Image 
                    </p>
                    <input
                      accept=".jpg, .png, .jpeg"
                      className="input-file image-undefined"
                      name="input-file"
                      onChange={[Function]}
                      type="file"
                    />
                  </div>,
                ],
                "className": "order-add-item",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <img
                    alt="This is a menu"
                    className="main-meal-item-img"
                    id="image-undefined"
                    src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                  />,
                  <div
                    className="change-preview-image modifiableundefined"
                    style={
                      Object {
                        "display": "none",
                        "opacity": 0,
                        "zIndex": -1,
                      }
                    }
                  >
                    <p
                      className="label-for-input"
                    >
                       Click to change Image 
                    </p>
                    <input
                      accept=".jpg, .png, .jpeg"
                      className="input-file image-undefined"
                      name="input-file"
                      onChange={[Function]}
                      type="file"
                    />
                  </div>,
                ],
                "className": "order-add-item",
              },
              "ref": null,
              "return": [Circular],
              "selfBaseTime": 0,
              "sibling": FiberNode {
                "_debugID": 14,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 19,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 21,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 23,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": " ",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": " ",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseTime": 0,
                      "sibling": FiberNode {
                        "_debugID": 24,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": "This is a menu",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": "This is a menu",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseTime": 0,
                        "sibling": FiberNode {
                          "_debugID": 25,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 2,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": " ",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": " ",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseTime": 0,
                          "sibling": null,
                          "stateNode":  ,
                          "tag": 6,
                          "treeBaseTime": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "stateNode": This is a menu,
                        "tag": 6,
                        "treeBaseTime": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "stateNode":  ,
                      "tag": 6,
                      "treeBaseTime": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        " ",
                        "This is a menu",
                        " ",
                      ],
                      "className": "item-title-main editable editableundefined",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        " ",
                        "This is a menu",
                        " ",
                      ],
                      "className": "item-title-main editable editableundefined",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseTime": 0,
                    "sibling": FiberNode {
                      "_debugID": 22,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 26,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": " ",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": " ",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseTime": 0,
                        "sibling": FiberNode {
                          "_debugID": 27,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseTime": 0,
                          "sibling": FiberNode {
                            "_debugID": 28,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 2,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": " ",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": " ",
                            "ref": null,
                            "return": [Circular],
                            "selfBaseTime": 0,
                            "sibling": null,
                            "stateNode":  ,
                            "tag": 6,
                            "treeBaseTime": 0,
                            "type": null,
                            "updateQueue": null,
                          },
                          "stateNode": ,
                          "tag": 6,
                          "treeBaseTime": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "stateNode":  ,
                        "tag": 6,
                        "treeBaseTime": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          " ",
                          "",
                          " ",
                        ],
                        "className": "item-description editable editableundefined",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          " ",
                          "",
                          " ",
                        ],
                        "className": "item-description editable editableundefined",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseTime": 0,
                      "sibling": null,
                      "stateNode": <p
                        class="item-description editable editableundefined"
                      >
                         
                        
                         
                      </p>,
                      "tag": 5,
                      "treeBaseTime": 0,
                      "type": "p",
                      "updateQueue": null,
                    },
                    "stateNode": <p
                      class="item-title-main editable editableundefined"
                    >
                       
                      This is a menu
                       
                    </p>,
                    "tag": 5,
                    "treeBaseTime": 0,
                    "type": "p",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <p
                        className="item-title-main editable editableundefined"
                      >
                         
                        This is a menu
                         
                      </p>,
                      <p
                        className="item-description editable editableundefined"
                      >
                         
                        
                         
                      </p>,
                    ],
                    "className": "item-title-and-description",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <p
                        className="item-title-main editable editableundefined"
                      >
                         
                        This is a menu
                         
                      </p>,
                      <p
                        className="item-description editable editableundefined"
                      >
                         
                        
                         
                      </p>,
                    ],
                    "className": "item-title-and-description",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseTime": 0,
                  "sibling": FiberNode {
                    "_debugID": 20,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 29,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": " Order ",
                        "className": "option-options",
                        "onClick": [Function],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": " Order ",
                        "className": "option-options",
                        "onClick": [Function],
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseTime": 0,
                      "sibling": FiberNode {
                        "_debugID": 30,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 31,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": " N",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": " N",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseTime": 0,
                          "sibling": FiberNode {
                            "_debugID": 32,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": "5000",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": "5000",
                            "ref": null,
                            "return": [Circular],
                            "selfBaseTime": 0,
                            "sibling": FiberNode {
                              "_debugID": 33,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "alternate": null,
                              "child": null,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 2,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": " ",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": " ",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseTime": 0,
                              "sibling": null,
                              "stateNode":  ,
                              "tag": 6,
                              "treeBaseTime": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "stateNode": 5000,
                            "tag": 6,
                            "treeBaseTime": 0,
                            "type": null,
                            "updateQueue": null,
                          },
                          "stateNode":  N,
                          "tag": 6,
                          "treeBaseTime": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            " N",
                            5000,
                            " ",
                          ],
                          "className": "option-options2",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            " N",
                            5000,
                            " ",
                          ],
                          "className": "option-options2",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseTime": 0,
                        "sibling": null,
                        "stateNode": <p
                          class="option-options2"
                        >
                           N
                          5000
                           
                        </p>,
                        "tag": 5,
                        "treeBaseTime": 0,
                        "type": "p",
                        "updateQueue": null,
                      },
                      "stateNode": <p
                        class="option-options"
                      >
                         Order 
                      </p>,
                      "tag": 5,
                      "treeBaseTime": 0,
                      "type": "p",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <p
                          className="option-options"
                          onClick={[Function]}
                        >
                           Order 
                        </p>,
                        <p
                          className="option-options2"
                        >
                           N
                          5000
                           
                        </p>,
                      ],
                      "className": "buttons-array-and-togglers",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <p
                          className="option-options"
                          onClick={[Function]}
                        >
                           Order 
                        </p>,
                        <p
                          className="option-options2"
                        >
                           N
                          5000
                           
                        </p>,
                      ],
                      "className": "buttons-array-and-togglers",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseTime": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="buttons-array-and-togglers"
                    >
                      <p
                        class="option-options"
                      >
                         Order 
                      </p>
                      <p
                        class="option-options2"
                      >
                         N
                        5000
                         
                      </p>
                    </div>,
                    "tag": 5,
                    "treeBaseTime": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div
                    class="item-title-and-description"
                  >
                    <p
                      class="item-title-main editable editableundefined"
                    >
                       
                      This is a menu
                       
                    </p>
                    <p
                      class="item-description editable editableundefined"
                    >
                       
                      
                       
                    </p>
                  </div>,
                  "tag": 5,
                  "treeBaseTime": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 1,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div
                      className="item-title-and-description"
                    >
                      <p
                        className="item-title-main editable editableundefined"
                      >
                         
                        This is a menu
                         
                      </p>
                      <p
                        className="item-description editable editableundefined"
                      >
                         
                        
                         
                      </p>
                    </div>,
                    <div
                      className="buttons-array-and-togglers"
                    >
                      <p
                        className="option-options"
                        onClick={[Function]}
                      >
                         Order 
                      </p>
                      <p
                        className="option-options2"
                      >
                         N
                        5000
                         
                      </p>
                    </div>,
                  ],
                  "className": "item-details",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div
                      className="item-title-and-description"
                    >
                      <p
                        className="item-title-main editable editableundefined"
                      >
                         
                        This is a menu
                         
                      </p>
                      <p
                        className="item-description editable editableundefined"
                      >
                         
                        
                         
                      </p>
                    </div>,
                    <div
                      className="buttons-array-and-togglers"
                    >
                      <p
                        className="option-options"
                        onClick={[Function]}
                      >
                         Order 
                      </p>
                      <p
                        className="option-options2"
                      >
                         N
                        5000
                         
                      </p>
                    </div>,
                  ],
                  "className": "item-details",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseTime": 0,
                "sibling": null,
                "stateNode": <div
                  class="item-details"
                >
                  <div
                    class="item-title-and-description"
                  >
                    <p
                      class="item-title-main editable editableundefined"
                    >
                       
                      This is a menu
                       
                    </p>
                    <p
                      class="item-description editable editableundefined"
                    >
                       
                      
                       
                    </p>
                  </div>
                  <div
                    class="buttons-array-and-togglers"
                  >
                    <p
                      class="option-options"
                    >
                       Order 
                    </p>
                    <p
                      class="option-options2"
                    >
                       N
                      5000
                       
                    </p>
                  </div>
                </div>,
                "tag": 5,
                "treeBaseTime": 0,
                "type": "div",
                "updateQueue": null,
              },
              "stateNode": <div
                class="order-add-item"
              >
                <img
                  alt="This is a menu"
                  class="main-meal-item-img"
                  id="image-undefined"
                  src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                />
                <div
                  class="change-preview-image modifiableundefined"
                  style="opacity: 0; z-index: -1; display: none;"
                >
                  <p
                    class="label-for-input"
                  >
                     Click to change Image 
                  </p>
                  <input
                    accept=".jpg, .png, .jpeg"
                    class="input-file image-undefined"
                    name="input-file"
                    type="file"
                  />
                </div>
              </div>,
              "tag": 5,
              "treeBaseTime": 0,
              "type": "div",
              "updateQueue": null,
            },
            "effectTag": 0,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                <div
                  className="order-add-item"
                >
                  <img
                    alt="This is a menu"
                    className="main-meal-item-img"
                    id="image-undefined"
                    src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                  />
                  <div
                    className="change-preview-image modifiableundefined"
                    style={
                      Object {
                        "display": "none",
                        "opacity": 0,
                        "zIndex": -1,
                      }
                    }
                  >
                    <p
                      className="label-for-input"
                    >
                       Click to change Image 
                    </p>
                    <input
                      accept=".jpg, .png, .jpeg"
                      className="input-file image-undefined"
                      name="input-file"
                      onChange={[Function]}
                      type="file"
                    />
                  </div>
                </div>,
                <div
                  className="item-details"
                >
                  <div
                    className="item-title-and-description"
                  >
                    <p
                      className="item-title-main editable editableundefined"
                    >
                       
                      This is a menu
                       
                    </p>
                    <p
                      className="item-description editable editableundefined"
                    >
                       
                      
                       
                    </p>
                  </div>
                  <div
                    className="buttons-array-and-togglers"
                  >
                    <p
                      className="option-options"
                      onClick={[Function]}
                    >
                       Order 
                    </p>
                    <p
                      className="option-options2"
                    >
                       N
                      5000
                       
                    </p>
                  </div>
                </div>,
              ],
              "className": "display-menu-item",
              "id": undefined,
              "onMouseLeave": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": Array [
                <div
                  className="order-add-item"
                >
                  <img
                    alt="This is a menu"
                    className="main-meal-item-img"
                    id="image-undefined"
                    src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                  />
                  <div
                    className="change-preview-image modifiableundefined"
                    style={
                      Object {
                        "display": "none",
                        "opacity": 0,
                        "zIndex": -1,
                      }
                    }
                  >
                    <p
                      className="label-for-input"
                    >
                       Click to change Image 
                    </p>
                    <input
                      accept=".jpg, .png, .jpeg"
                      className="input-file image-undefined"
                      name="input-file"
                      onChange={[Function]}
                      type="file"
                    />
                  </div>
                </div>,
                <div
                  className="item-details"
                >
                  <div
                    className="item-title-and-description"
                  >
                    <p
                      className="item-title-main editable editableundefined"
                    >
                       
                      This is a menu
                       
                    </p>
                    <p
                      className="item-description editable editableundefined"
                    >
                       
                      
                       
                    </p>
                  </div>
                  <div
                    className="buttons-array-and-togglers"
                  >
                    <p
                      className="option-options"
                      onClick={[Function]}
                    >
                       Order 
                    </p>
                    <p
                      className="option-options2"
                    >
                       N
                      5000
                       
                    </p>
                  </div>
                </div>,
              ],
              "className": "display-menu-item",
              "id": undefined,
              "onMouseLeave": [Function],
            },
            "ref": null,
            "return": [Circular],
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": <div
              class="display-menu-item"
            >
              <div
                class="order-add-item"
              >
                <img
                  alt="This is a menu"
                  class="main-meal-item-img"
                  id="image-undefined"
                  src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                />
                <div
                  class="change-preview-image modifiableundefined"
                  style="opacity: 0; z-index: -1; display: none;"
                >
                  <p
                    class="label-for-input"
                  >
                     Click to change Image 
                  </p>
                  <input
                    accept=".jpg, .png, .jpeg"
                    class="input-file image-undefined"
                    name="input-file"
                    type="file"
                  />
                </div>
              </div>
              <div
                class="item-details"
              >
                <div
                  class="item-title-and-description"
                >
                  <p
                    class="item-title-main editable editableundefined"
                  >
                     
                    This is a menu
                     
                  </p>
                  <p
                    class="item-description editable editableundefined"
                  >
                     
                    
                     
                  </p>
                </div>
                <div
                  class="buttons-array-and-togglers"
                >
                  <p
                    class="option-options"
                  >
                     Order 
                  </p>
                  <p
                    class="option-options2"
                  >
                     N
                    5000
                     
                  </p>
                </div>
              </div>
            </div>,
            "tag": 5,
            "treeBaseTime": 0,
            "type": "div",
            "updateQueue": null,
          },
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "dispatch": [Function],
            "displayText": "Modify",
            "handleDelete": [Function],
            "handleEdit": [Function],
            "kitchen": Object {
              "description": "This is my test menu",
              "id": 3,
              "name": "This is great",
            },
            "meal": Object {
              "description": "",
              "kitchenId": 2,
              "name": "This is a menu",
              "price": 5000,
            },
            "renderEditable": false,
            "wantsToEdit": false,
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "dispatch": [Function],
            "displayText": "Modify",
            "handleDelete": [Function],
            "handleEdit": [Function],
            "kitchen": Object {
              "description": "This is my test menu",
              "id": 3,
              "name": "This is great",
            },
            "meal": Object {
              "description": "",
              "kitchenId": 2,
              "name": "This is a menu",
              "price": 5000,
            },
            "renderEditable": false,
            "wantsToEdit": false,
          },
          "ref": null,
          "return": [Circular],
          "selfBaseTime": 0,
          "sibling": null,
          "stateNode": null,
          "tag": 1,
          "treeBaseTime": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "effectTag": 1,
        "expirationTime": 0,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {
          "dispatch": [Function],
          "history": Object {
            "push": [Function],
          },
          "kitchen": Object {
            "description": "This is my test menu",
            "id": 3,
            "name": "This is great",
          },
          "meal": Object {
            "description": "",
            "kitchenId": 2,
            "name": "This is a menu",
            "price": 5000,
          },
          "renderEditable": false,
        },
        "memoizedState": Object {
          "displayText": "Modify",
          "wantsToEdit": false,
        },
        "mode": 0,
        "nextEffect": null,
        "pendingProps": Object {
          "dispatch": [Function],
          "history": Object {
            "push": [Function],
          },
          "kitchen": Object {
            "description": "This is my test menu",
            "id": 3,
            "name": "This is great",
          },
          "meal": Object {
            "description": "",
            "kitchenId": 2,
            "name": "This is a menu",
            "price": 5000,
          },
          "renderEditable": false,
        },
        "ref": null,
        "return": FiberNode {
          "_debugID": 9,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meal": Object {
                "description": "",
                "kitchenId": 2,
                "name": "This is a menu",
                "price": 5000,
              },
              "renderEditable": false,
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meal": Object {
                "description": "",
                "kitchenId": 2,
                "name": "This is a menu",
                "price": 5000,
              },
              "renderEditable": false,
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meal": Object {
                "description": "",
                "kitchenId": 2,
                "name": "This is a menu",
                "price": 5000,
              },
              "renderEditable": false,
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 7,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="display-menu-item"
                  >
                    <div
                      class="order-add-item"
                    >
                      <img
                        alt="This is a menu"
                        class="main-meal-item-img"
                        id="image-undefined"
                        src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                      />
                      <div
                        class="change-preview-image modifiableundefined"
                        style="opacity: 0; z-index: -1; display: none;"
                      >
                        <p
                          class="label-for-input"
                        >
                           Click to change Image 
                        </p>
                        <input
                          accept=".jpg, .png, .jpeg"
                          class="input-file image-undefined"
                          name="input-file"
                          type="file"
                        />
                      </div>
                    </div>
                    <div
                      class="item-details"
                    >
                      <div
                        class="item-title-and-description"
                      >
                        <p
                          class="item-title-main editable editableundefined"
                        >
                           
                          This is a menu
                           
                        </p>
                        <p
                          class="item-description editable editableundefined"
                        >
                           
                          
                           
                        </p>
                      </div>
                      <div
                        class="buttons-array-and-togglers"
                      >
                        <p
                          class="option-options"
                        >
                           Order 
                        </p>
                        <p
                          class="option-options2"
                        >
                           N
                          5000
                           
                        </p>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "treeBaseTime": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "expirationTime": 1,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "dispatch": [Function],
                          "history": Object {
                            "push": [Function],
                          },
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meal": Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                          "renderEditable": false,
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "dispatch": [Function],
                          "history": Object {
                            "push": [Function],
                          },
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meal": Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                          "renderEditable": false,
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "effectTag": 32,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "dispatch": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meal": Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                    "renderEditable": false,
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="display-menu-item"
                >
                  <div
                    class="order-add-item"
                  >
                    <img
                      alt="This is a menu"
                      class="main-meal-item-img"
                      id="image-undefined"
                      src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                    />
                    <div
                      class="change-preview-image modifiableundefined"
                      style="opacity: 0; z-index: -1; display: none;"
                    >
                      <p
                        class="label-for-input"
                      >
                         Click to change Image 
                      </p>
                      <input
                        accept=".jpg, .png, .jpeg"
                        class="input-file image-undefined"
                        name="input-file"
                        type="file"
                      />
                    </div>
                  </div>
                  <div
                    class="item-details"
                  >
                    <div
                      class="item-title-and-description"
                    >
                      <p
                        class="item-title-main editable editableundefined"
                      >
                         
                        This is a menu
                         
                      </p>
                      <p
                        class="item-description editable editableundefined"
                      >
                         
                        
                         
                      </p>
                    </div>
                    <div
                      class="buttons-array-and-togglers"
                    >
                      <p
                        class="option-options"
                      >
                         Order 
                      </p>
                      <p
                        class="option-options2"
                      >
                         N
                        5000
                         
                      </p>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "treeBaseTime": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "dispatch": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meal": Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                      "renderEditable": false,
                    }
                  }
                />,
              },
              "expirationTime": 0,
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseTime": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meal": Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
                "renderEditable": false,
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meal": Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
                "renderEditable": false,
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseTime": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "selfBaseTime": 0,
        "sibling": null,
        "stateNode": [Circular],
        "tag": 2,
        "treeBaseTime": 0,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "handleDelete": [Function],
      "handleEdit": [Function],
      "props": Object {
        "dispatch": [Function],
        "history": Object {
          "push": [Function],
        },
        "kitchen": Object {
          "description": "This is my test menu",
          "id": 3,
          "name": "This is great",
        },
        "meal": Object {
          "description": "",
          "kitchenId": 2,
          "name": "This is a menu",
          "price": 5000,
        },
        "renderEditable": false,
      },
      "refs": Object {},
      "render": [Function],
      "state": Object {
        "displayText": "Modify",
        "wantsToEdit": false,
      },
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "dispatch": [Function],
      "history": Object {
        "push": [Function],
      },
      "kitchen": Object {
        "description": "This is my test menu",
        "id": 3,
        "name": "This is great",
      },
      "meal": Object {
        "description": "",
        "kitchenId": 2,
        "name": "This is a menu",
        "price": 5000,
      },
      "renderEditable": false,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "dispatch": [Function],
        "displayText": "Modify",
        "handleDelete": [Function],
        "handleEdit": [Function],
        "kitchen": Object {
          "description": "This is my test menu",
          "id": 3,
          "name": "This is great",
        },
        "meal": Object {
          "description": "",
          "kitchenId": 2,
          "name": "This is a menu",
          "price": 5000,
        },
        "renderEditable": false,
        "wantsToEdit": false,
      },
      "ref": null,
      "rendered": Object {
        "instance": <div
          class="display-menu-item"
        >
          <div
            class="order-add-item"
          >
            <img
              alt="This is a menu"
              class="main-meal-item-img"
              id="image-undefined"
              src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
            />
            <div
              class="change-preview-image modifiableundefined"
              style="opacity: 0; z-index: -1; display: none;"
            >
              <p
                class="label-for-input"
              >
                 Click to change Image 
              </p>
              <input
                accept=".jpg, .png, .jpeg"
                class="input-file image-undefined"
                name="input-file"
                type="file"
              />
            </div>
          </div>
          <div
            class="item-details"
          >
            <div
              class="item-title-and-description"
            >
              <p
                class="item-title-main editable editableundefined"
              >
                 
                This is a menu
                 
              </p>
              <p
                class="item-description editable editableundefined"
              >
                 
                
                 
              </p>
            </div>
            <div
              class="buttons-array-and-togglers"
            >
              <p
                class="option-options"
              >
                 Order 
              </p>
              <p
                class="option-options2"
              >
                 N
                5000
                 
              </p>
            </div>
          </div>
        </div>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="order-add-item"
            >
              <img
                alt="This is a menu"
                className="main-meal-item-img"
                id="image-undefined"
                src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
              />
              <div
                className="change-preview-image modifiableundefined"
                style={
                  Object {
                    "display": "none",
                    "opacity": 0,
                    "zIndex": -1,
                  }
                }
              >
                <p
                  className="label-for-input"
                >
                   Click to change Image 
                </p>
                <input
                  accept=".jpg, .png, .jpeg"
                  className="input-file image-undefined"
                  name="input-file"
                  onChange={[Function]}
                  type="file"
                />
              </div>
            </div>,
            <div
              className="item-details"
            >
              <div
                className="item-title-and-description"
              >
                <p
                  className="item-title-main editable editableundefined"
                >
                   
                  This is a menu
                   
                </p>
                <p
                  className="item-description editable editableundefined"
                >
                   
                  
                   
                </p>
              </div>
              <div
                className="buttons-array-and-togglers"
              >
                <p
                  className="option-options"
                  onClick={[Function]}
                >
                   Order 
                </p>
                <p
                  className="option-options2"
                >
                   N
                  5000
                   
                </p>
              </div>
            </div>,
          ],
          "className": "display-menu-item",
          "id": undefined,
          "onMouseLeave": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": <div
              class="order-add-item"
            >
              <img
                alt="This is a menu"
                class="main-meal-item-img"
                id="image-undefined"
                src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
              />
              <div
                class="change-preview-image modifiableundefined"
                style="opacity: 0; z-index: -1; display: none;"
              >
                <p
                  class="label-for-input"
                >
                   Click to change Image 
                </p>
                <input
                  accept=".jpg, .png, .jpeg"
                  class="input-file image-undefined"
                  name="input-file"
                  type="file"
                />
              </div>
            </div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <img
                  alt="This is a menu"
                  className="main-meal-item-img"
                  id="image-undefined"
                  src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                />,
                <div
                  className="change-preview-image modifiableundefined"
                  style={
                    Object {
                      "display": "none",
                      "opacity": 0,
                      "zIndex": -1,
                    }
                  }
                >
                  <p
                    className="label-for-input"
                  >
                     Click to change Image 
                  </p>
                  <input
                    accept=".jpg, .png, .jpeg"
                    className="input-file image-undefined"
                    name="input-file"
                    onChange={[Function]}
                    type="file"
                  />
                </div>,
              ],
              "className": "order-add-item",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <img
                  alt="This is a menu"
                  class="main-meal-item-img"
                  id="image-undefined"
                  src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "This is a menu",
                  "className": "main-meal-item-img",
                  "id": "image-undefined",
                  "src": "https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "img",
              },
              Object {
                "instance": <div
                  class="change-preview-image modifiableundefined"
                  style="opacity: 0; z-index: -1; display: none;"
                >
                  <p
                    class="label-for-input"
                  >
                     Click to change Image 
                  </p>
                  <input
                    accept=".jpg, .png, .jpeg"
                    class="input-file image-undefined"
                    name="input-file"
                    type="file"
                  />
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <p
                      className="label-for-input"
                    >
                       Click to change Image 
                    </p>,
                    <input
                      accept=".jpg, .png, .jpeg"
                      className="input-file image-undefined"
                      name="input-file"
                      onChange={[Function]}
                      type="file"
                    />,
                  ],
                  "className": "change-preview-image modifiableundefined",
                  "style": Object {
                    "display": "none",
                    "opacity": 0,
                    "zIndex": -1,
                  },
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <p
                      class="label-for-input"
                    >
                       Click to change Image 
                    </p>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": " Click to change Image ",
                      "className": "label-for-input",
                    },
                    "ref": null,
                    "rendered": Array [
                      " Click to change Image ",
                    ],
                    "type": "p",
                  },
                  Object {
                    "instance": <input
                      accept=".jpg, .png, .jpeg"
                      class="input-file image-undefined"
                      name="input-file"
                      type="file"
                    />,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "accept": ".jpg, .png, .jpeg",
                      "className": "input-file image-undefined",
                      "name": "input-file",
                      "onChange": [Function],
                      "type": "file",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "input",
                  },
                ],
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": <div
              class="item-details"
            >
              <div
                class="item-title-and-description"
              >
                <p
                  class="item-title-main editable editableundefined"
                >
                   
                  This is a menu
                   
                </p>
                <p
                  class="item-description editable editableundefined"
                >
                   
                  
                   
                </p>
              </div>
              <div
                class="buttons-array-and-togglers"
              >
                <p
                  class="option-options"
                >
                   Order 
                </p>
                <p
                  class="option-options2"
                >
                   N
                  5000
                   
                </p>
              </div>
            </div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="item-title-and-description"
                >
                  <p
                    className="item-title-main editable editableundefined"
                  >
                     
                    This is a menu
                     
                  </p>
                  <p
                    className="item-description editable editableundefined"
                  >
                     
                    
                     
                  </p>
                </div>,
                <div
                  className="buttons-array-and-togglers"
                >
                  <p
                    className="option-options"
                    onClick={[Function]}
                  >
                     Order 
                  </p>
                  <p
                    className="option-options2"
                  >
                     N
                    5000
                     
                  </p>
                </div>,
              ],
              "className": "item-details",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <div
                  class="item-title-and-description"
                >
                  <p
                    class="item-title-main editable editableundefined"
                  >
                     
                    This is a menu
                     
                  </p>
                  <p
                    class="item-description editable editableundefined"
                  >
                     
                    
                     
                  </p>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <p
                      className="item-title-main editable editableundefined"
                    >
                       
                      This is a menu
                       
                    </p>,
                    <p
                      className="item-description editable editableundefined"
                    >
                       
                      
                       
                    </p>,
                  ],
                  "className": "item-title-and-description",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <p
                      class="item-title-main editable editableundefined"
                    >
                       
                      This is a menu
                       
                    </p>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        " ",
                        "This is a menu",
                        " ",
                      ],
                      "className": "item-title-main editable editableundefined",
                    },
                    "ref": null,
                    "rendered": Array [
                      " ",
                      "This is a menu",
                      " ",
                    ],
                    "type": "p",
                  },
                  Object {
                    "instance": <p
                      class="item-description editable editableundefined"
                    >
                       
                      
                       
                    </p>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        " ",
                        "",
                        " ",
                      ],
                      "className": "item-description editable editableundefined",
                    },
                    "ref": null,
                    "rendered": Array [
                      " ",
                      "",
                      " ",
                    ],
                    "type": "p",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": <div
                  class="buttons-array-and-togglers"
                >
                  <p
                    class="option-options"
                  >
                     Order 
                  </p>
                  <p
                    class="option-options2"
                  >
                     N
                    5000
                     
                  </p>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <p
                      className="option-options"
                      onClick={[Function]}
                    >
                       Order 
                    </p>,
                    <p
                      className="option-options2"
                    >
                       N
                      5000
                       
                    </p>,
                  ],
                  "className": "buttons-array-and-togglers",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <p
                      class="option-options"
                    >
                       Order 
                    </p>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": " Order ",
                      "className": "option-options",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": Array [
                      " Order ",
                    ],
                    "type": "p",
                  },
                  Object {
                    "instance": <p
                      class="option-options2"
                    >
                       N
                      5000
                       
                    </p>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        " N",
                        5000,
                        " ",
                      ],
                      "className": "option-options2",
                    },
                    "ref": null,
                    "rendered": Array [
                      " N",
                      "5000",
                      " ",
                    ],
                    "type": "p",
                  },
                ],
                "type": "div",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": SingleMealCardContainer {
        "_reactInternalFiber": FiberNode {
          "_debugID": 10,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 9,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meal": Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
                "renderEditable": false,
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meal": Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
                "renderEditable": false,
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meal": Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
                "renderEditable": false,
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 7,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseTime": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="display-menu-item"
                    >
                      <div
                        class="order-add-item"
                      >
                        <img
                          alt="This is a menu"
                          class="main-meal-item-img"
                          id="image-undefined"
                          src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                        />
                        <div
                          class="change-preview-image modifiableundefined"
                          style="opacity: 0; z-index: -1; display: none;"
                        >
                          <p
                            class="label-for-input"
                          >
                             Click to change Image 
                          </p>
                          <input
                            accept=".jpg, .png, .jpeg"
                            class="input-file image-undefined"
                            name="input-file"
                            type="file"
                          />
                        </div>
                      </div>
                      <div
                        class="item-details"
                      >
                        <div
                          class="item-title-and-description"
                        >
                          <p
                            class="item-title-main editable editableundefined"
                          >
                             
                            This is a menu
                             
                          </p>
                          <p
                            class="item-description editable editableundefined"
                          >
                             
                            
                             
                          </p>
                        </div>
                        <div
                          class="buttons-array-and-togglers"
                        >
                          <p
                            class="option-options"
                          >
                             Order 
                          </p>
                          <p
                            class="option-options2"
                          >
                             N
                            5000
                             
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "treeBaseTime": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "expirationTime": 1,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "dispatch": [Function],
                            "history": Object {
                              "push": [Function],
                            },
                            "kitchen": Object {
                              "description": "This is my test menu",
                              "id": 3,
                              "name": "This is great",
                            },
                            "meal": Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                            "renderEditable": false,
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "dispatch": [Function],
                            "history": Object {
                              "push": [Function],
                            },
                            "kitchen": Object {
                              "description": "This is my test menu",
                              "id": 3,
                              "name": "This is great",
                            },
                            "meal": Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                            "renderEditable": false,
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "effectTag": 32,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "dispatch": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meal": Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                      "renderEditable": false,
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="display-menu-item"
                  >
                    <div
                      class="order-add-item"
                    >
                      <img
                        alt="This is a menu"
                        class="main-meal-item-img"
                        id="image-undefined"
                        src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                      />
                      <div
                        class="change-preview-image modifiableundefined"
                        style="opacity: 0; z-index: -1; display: none;"
                      >
                        <p
                          class="label-for-input"
                        >
                           Click to change Image 
                        </p>
                        <input
                          accept=".jpg, .png, .jpeg"
                          class="input-file image-undefined"
                          name="input-file"
                          type="file"
                        />
                      </div>
                    </div>
                    <div
                      class="item-details"
                    >
                      <div
                        class="item-title-and-description"
                      >
                        <p
                          class="item-title-main editable editableundefined"
                        >
                           
                          This is a menu
                           
                        </p>
                        <p
                          class="item-description editable editableundefined"
                        >
                           
                          
                           
                        </p>
                      </div>
                      <div
                        class="buttons-array-and-togglers"
                      >
                        <p
                          class="option-options"
                        >
                           Order 
                        </p>
                        <p
                          class="option-options2"
                        >
                           N
                          5000
                           
                        </p>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "treeBaseTime": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "dispatch": [Function],
                        "history": Object {
                          "push": [Function],
                        },
                        "kitchen": Object {
                          "description": "This is my test menu",
                          "id": 3,
                          "name": "This is great",
                        },
                        "meal": Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                        "renderEditable": false,
                      }
                    }
                  />,
                },
                "expirationTime": 0,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "dispatch": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meal": Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                  "renderEditable": false,
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "dispatch": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meal": Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                  "renderEditable": false,
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseTime": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 11,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 12,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 13,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 15,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": null,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "alt": "This is a menu",
                    "className": "main-meal-item-img",
                    "id": "image-undefined",
                    "src": "https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "alt": "This is a menu",
                    "className": "main-meal-item-img",
                    "id": "image-undefined",
                    "src": "https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseTime": 0,
                  "sibling": FiberNode {
                    "_debugID": 16,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 17,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": null,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": " Click to change Image ",
                        "className": "label-for-input",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": " Click to change Image ",
                        "className": "label-for-input",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseTime": 0,
                      "sibling": FiberNode {
                        "_debugID": 18,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "accept": ".jpg, .png, .jpeg",
                          "className": "input-file image-undefined",
                          "name": "input-file",
                          "onChange": [Function],
                          "type": "file",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "accept": ".jpg, .png, .jpeg",
                          "className": "input-file image-undefined",
                          "name": "input-file",
                          "onChange": [Function],
                          "type": "file",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseTime": 0,
                        "sibling": null,
                        "stateNode": <input
                          accept=".jpg, .png, .jpeg"
                          class="input-file image-undefined"
                          name="input-file"
                          type="file"
                        />,
                        "tag": 5,
                        "treeBaseTime": 0,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": <p
                        class="label-for-input"
                      >
                         Click to change Image 
                      </p>,
                      "tag": 5,
                      "treeBaseTime": 0,
                      "type": "p",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <p
                          className="label-for-input"
                        >
                           Click to change Image 
                        </p>,
                        <input
                          accept=".jpg, .png, .jpeg"
                          className="input-file image-undefined"
                          name="input-file"
                          onChange={[Function]}
                          type="file"
                        />,
                      ],
                      "className": "change-preview-image modifiableundefined",
                      "style": Object {
                        "display": "none",
                        "opacity": 0,
                        "zIndex": -1,
                      },
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <p
                          className="label-for-input"
                        >
                           Click to change Image 
                        </p>,
                        <input
                          accept=".jpg, .png, .jpeg"
                          className="input-file image-undefined"
                          name="input-file"
                          onChange={[Function]}
                          type="file"
                        />,
                      ],
                      "className": "change-preview-image modifiableundefined",
                      "style": Object {
                        "display": "none",
                        "opacity": 0,
                        "zIndex": -1,
                      },
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseTime": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="change-preview-image modifiableundefined"
                      style="opacity: 0; z-index: -1; display: none;"
                    >
                      <p
                        class="label-for-input"
                      >
                         Click to change Image 
                      </p>
                      <input
                        accept=".jpg, .png, .jpeg"
                        class="input-file image-undefined"
                        name="input-file"
                        type="file"
                      />
                    </div>,
                    "tag": 5,
                    "treeBaseTime": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <img
                    alt="This is a menu"
                    class="main-meal-item-img"
                    id="image-undefined"
                    src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                  />,
                  "tag": 5,
                  "treeBaseTime": 0,
                  "type": "img",
                  "updateQueue": null,
                },
                "effectTag": 0,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <img
                      alt="This is a menu"
                      className="main-meal-item-img"
                      id="image-undefined"
                      src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                    />,
                    <div
                      className="change-preview-image modifiableundefined"
                      style={
                        Object {
                          "display": "none",
                          "opacity": 0,
                          "zIndex": -1,
                        }
                      }
                    >
                      <p
                        className="label-for-input"
                      >
                         Click to change Image 
                      </p>
                      <input
                        accept=".jpg, .png, .jpeg"
                        className="input-file image-undefined"
                        name="input-file"
                        onChange={[Function]}
                        type="file"
                      />
                    </div>,
                  ],
                  "className": "order-add-item",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <img
                      alt="This is a menu"
                      className="main-meal-item-img"
                      id="image-undefined"
                      src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                    />,
                    <div
                      className="change-preview-image modifiableundefined"
                      style={
                        Object {
                          "display": "none",
                          "opacity": 0,
                          "zIndex": -1,
                        }
                      }
                    >
                      <p
                        className="label-for-input"
                      >
                         Click to change Image 
                      </p>
                      <input
                        accept=".jpg, .png, .jpeg"
                        className="input-file image-undefined"
                        name="input-file"
                        onChange={[Function]}
                        type="file"
                      />
                    </div>,
                  ],
                  "className": "order-add-item",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseTime": 0,
                "sibling": FiberNode {
                  "_debugID": 14,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 19,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 21,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 23,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": " ",
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": " ",
                        "ref": null,
                        "return": [Circular],
                        "selfBaseTime": 0,
                        "sibling": FiberNode {
                          "_debugID": 24,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": "This is a menu",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": "This is a menu",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseTime": 0,
                          "sibling": FiberNode {
                            "_debugID": 25,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 2,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": " ",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": " ",
                            "ref": null,
                            "return": [Circular],
                            "selfBaseTime": 0,
                            "sibling": null,
                            "stateNode":  ,
                            "tag": 6,
                            "treeBaseTime": 0,
                            "type": null,
                            "updateQueue": null,
                          },
                          "stateNode": This is a menu,
                          "tag": 6,
                          "treeBaseTime": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "stateNode":  ,
                        "tag": 6,
                        "treeBaseTime": 0,
                        "type": null,
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          " ",
                          "This is a menu",
                          " ",
                        ],
                        "className": "item-title-main editable editableundefined",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          " ",
                          "This is a menu",
                          " ",
                        ],
                        "className": "item-title-main editable editableundefined",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseTime": 0,
                      "sibling": FiberNode {
                        "_debugID": 22,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 26,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "alternate": null,
                          "child": null,
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": " ",
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": " ",
                          "ref": null,
                          "return": [Circular],
                          "selfBaseTime": 0,
                          "sibling": FiberNode {
                            "_debugID": 27,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": "",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": "",
                            "ref": null,
                            "return": [Circular],
                            "selfBaseTime": 0,
                            "sibling": FiberNode {
                              "_debugID": 28,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "alternate": null,
                              "child": null,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 2,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": " ",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": " ",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseTime": 0,
                              "sibling": null,
                              "stateNode":  ,
                              "tag": 6,
                              "treeBaseTime": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "stateNode": ,
                            "tag": 6,
                            "treeBaseTime": 0,
                            "type": null,
                            "updateQueue": null,
                          },
                          "stateNode":  ,
                          "tag": 6,
                          "treeBaseTime": 0,
                          "type": null,
                          "updateQueue": null,
                        },
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            " ",
                            "",
                            " ",
                          ],
                          "className": "item-description editable editableundefined",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            " ",
                            "",
                            " ",
                          ],
                          "className": "item-description editable editableundefined",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseTime": 0,
                        "sibling": null,
                        "stateNode": <p
                          class="item-description editable editableundefined"
                        >
                           
                          
                           
                        </p>,
                        "tag": 5,
                        "treeBaseTime": 0,
                        "type": "p",
                        "updateQueue": null,
                      },
                      "stateNode": <p
                        class="item-title-main editable editableundefined"
                      >
                         
                        This is a menu
                         
                      </p>,
                      "tag": 5,
                      "treeBaseTime": 0,
                      "type": "p",
                      "updateQueue": null,
                    },
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <p
                          className="item-title-main editable editableundefined"
                        >
                           
                          This is a menu
                           
                        </p>,
                        <p
                          className="item-description editable editableundefined"
                        >
                           
                          
                           
                        </p>,
                      ],
                      "className": "item-title-and-description",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <p
                          className="item-title-main editable editableundefined"
                        >
                           
                          This is a menu
                           
                        </p>,
                        <p
                          className="item-description editable editableundefined"
                        >
                           
                          
                           
                        </p>,
                      ],
                      "className": "item-title-and-description",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseTime": 0,
                    "sibling": FiberNode {
                      "_debugID": 20,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 29,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "alternate": null,
                        "child": null,
                        "effectTag": 0,
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": " Order ",
                          "className": "option-options",
                          "onClick": [Function],
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": " Order ",
                          "className": "option-options",
                          "onClick": [Function],
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseTime": 0,
                        "sibling": FiberNode {
                          "_debugID": 30,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 31,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "alternate": null,
                            "child": null,
                            "effectTag": 0,
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": " N",
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": " N",
                            "ref": null,
                            "return": [Circular],
                            "selfBaseTime": 0,
                            "sibling": FiberNode {
                              "_debugID": 32,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": null,
                              "_debugSource": null,
                              "alternate": null,
                              "child": null,
                              "effectTag": 0,
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": "5000",
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": "5000",
                              "ref": null,
                              "return": [Circular],
                              "selfBaseTime": 0,
                              "sibling": FiberNode {
                                "_debugID": 33,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": null,
                                "_debugSource": null,
                                "alternate": null,
                                "child": null,
                                "effectTag": 0,
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 2,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": " ",
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": " ",
                                "ref": null,
                                "return": [Circular],
                                "selfBaseTime": 0,
                                "sibling": null,
                                "stateNode":  ,
                                "tag": 6,
                                "treeBaseTime": 0,
                                "type": null,
                                "updateQueue": null,
                              },
                              "stateNode": 5000,
                              "tag": 6,
                              "treeBaseTime": 0,
                              "type": null,
                              "updateQueue": null,
                            },
                            "stateNode":  N,
                            "tag": 6,
                            "treeBaseTime": 0,
                            "type": null,
                            "updateQueue": null,
                          },
                          "effectTag": 0,
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              " N",
                              5000,
                              " ",
                            ],
                            "className": "option-options2",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              " N",
                              5000,
                              " ",
                            ],
                            "className": "option-options2",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseTime": 0,
                          "sibling": null,
                          "stateNode": <p
                            class="option-options2"
                          >
                             N
                            5000
                             
                          </p>,
                          "tag": 5,
                          "treeBaseTime": 0,
                          "type": "p",
                          "updateQueue": null,
                        },
                        "stateNode": <p
                          class="option-options"
                        >
                           Order 
                        </p>,
                        "tag": 5,
                        "treeBaseTime": 0,
                        "type": "p",
                        "updateQueue": null,
                      },
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <p
                            className="option-options"
                            onClick={[Function]}
                          >
                             Order 
                          </p>,
                          <p
                            className="option-options2"
                          >
                             N
                            5000
                             
                          </p>,
                        ],
                        "className": "buttons-array-and-togglers",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <p
                            className="option-options"
                            onClick={[Function]}
                          >
                             Order 
                          </p>,
                          <p
                            className="option-options2"
                          >
                             N
                            5000
                             
                          </p>,
                        ],
                        "className": "buttons-array-and-togglers",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseTime": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="buttons-array-and-togglers"
                      >
                        <p
                          class="option-options"
                        >
                           Order 
                        </p>
                        <p
                          class="option-options2"
                        >
                           N
                          5000
                           
                        </p>
                      </div>,
                      "tag": 5,
                      "treeBaseTime": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <div
                      class="item-title-and-description"
                    >
                      <p
                        class="item-title-main editable editableundefined"
                      >
                         
                        This is a menu
                         
                      </p>
                      <p
                        class="item-description editable editableundefined"
                      >
                         
                        
                         
                      </p>
                    </div>,
                    "tag": 5,
                    "treeBaseTime": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <div
                        className="item-title-and-description"
                      >
                        <p
                          className="item-title-main editable editableundefined"
                        >
                           
                          This is a menu
                           
                        </p>
                        <p
                          className="item-description editable editableundefined"
                        >
                           
                          
                           
                        </p>
                      </div>,
                      <div
                        className="buttons-array-and-togglers"
                      >
                        <p
                          className="option-options"
                          onClick={[Function]}
                        >
                           Order 
                        </p>
                        <p
                          className="option-options2"
                        >
                           N
                          5000
                           
                        </p>
                      </div>,
                    ],
                    "className": "item-details",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <div
                        className="item-title-and-description"
                      >
                        <p
                          className="item-title-main editable editableundefined"
                        >
                           
                          This is a menu
                           
                        </p>
                        <p
                          className="item-description editable editableundefined"
                        >
                           
                          
                           
                        </p>
                      </div>,
                      <div
                        className="buttons-array-and-togglers"
                      >
                        <p
                          className="option-options"
                          onClick={[Function]}
                        >
                           Order 
                        </p>
                        <p
                          className="option-options2"
                        >
                           N
                          5000
                           
                        </p>
                      </div>,
                    ],
                    "className": "item-details",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseTime": 0,
                  "sibling": null,
                  "stateNode": <div
                    class="item-details"
                  >
                    <div
                      class="item-title-and-description"
                    >
                      <p
                        class="item-title-main editable editableundefined"
                      >
                         
                        This is a menu
                         
                      </p>
                      <p
                        class="item-description editable editableundefined"
                      >
                         
                        
                         
                      </p>
                    </div>
                    <div
                      class="buttons-array-and-togglers"
                    >
                      <p
                        class="option-options"
                      >
                         Order 
                      </p>
                      <p
                        class="option-options2"
                      >
                         N
                        5000
                         
                      </p>
                    </div>
                  </div>,
                  "tag": 5,
                  "treeBaseTime": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <div
                  class="order-add-item"
                >
                  <img
                    alt="This is a menu"
                    class="main-meal-item-img"
                    id="image-undefined"
                    src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                  />
                  <div
                    class="change-preview-image modifiableundefined"
                    style="opacity: 0; z-index: -1; display: none;"
                  >
                    <p
                      class="label-for-input"
                    >
                       Click to change Image 
                    </p>
                    <input
                      accept=".jpg, .png, .jpeg"
                      class="input-file image-undefined"
                      name="input-file"
                      type="file"
                    />
                  </div>
                </div>,
                "tag": 5,
                "treeBaseTime": 0,
                "type": "div",
                "updateQueue": null,
              },
              "effectTag": 0,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div
                    className="order-add-item"
                  >
                    <img
                      alt="This is a menu"
                      className="main-meal-item-img"
                      id="image-undefined"
                      src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                    />
                    <div
                      className="change-preview-image modifiableundefined"
                      style={
                        Object {
                          "display": "none",
                          "opacity": 0,
                          "zIndex": -1,
                        }
                      }
                    >
                      <p
                        className="label-for-input"
                      >
                         Click to change Image 
                      </p>
                      <input
                        accept=".jpg, .png, .jpeg"
                        className="input-file image-undefined"
                        name="input-file"
                        onChange={[Function]}
                        type="file"
                      />
                    </div>
                  </div>,
                  <div
                    className="item-details"
                  >
                    <div
                      className="item-title-and-description"
                    >
                      <p
                        className="item-title-main editable editableundefined"
                      >
                         
                        This is a menu
                         
                      </p>
                      <p
                        className="item-description editable editableundefined"
                      >
                         
                        
                         
                      </p>
                    </div>
                    <div
                      className="buttons-array-and-togglers"
                    >
                      <p
                        className="option-options"
                        onClick={[Function]}
                      >
                         Order 
                      </p>
                      <p
                        className="option-options2"
                      >
                         N
                        5000
                         
                      </p>
                    </div>
                  </div>,
                ],
                "className": "display-menu-item",
                "id": undefined,
                "onMouseLeave": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div
                    className="order-add-item"
                  >
                    <img
                      alt="This is a menu"
                      className="main-meal-item-img"
                      id="image-undefined"
                      src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                    />
                    <div
                      className="change-preview-image modifiableundefined"
                      style={
                        Object {
                          "display": "none",
                          "opacity": 0,
                          "zIndex": -1,
                        }
                      }
                    >
                      <p
                        className="label-for-input"
                      >
                         Click to change Image 
                      </p>
                      <input
                        accept=".jpg, .png, .jpeg"
                        className="input-file image-undefined"
                        name="input-file"
                        onChange={[Function]}
                        type="file"
                      />
                    </div>
                  </div>,
                  <div
                    className="item-details"
                  >
                    <div
                      className="item-title-and-description"
                    >
                      <p
                        className="item-title-main editable editableundefined"
                      >
                         
                        This is a menu
                         
                      </p>
                      <p
                        className="item-description editable editableundefined"
                      >
                         
                        
                         
                      </p>
                    </div>
                    <div
                      className="buttons-array-and-togglers"
                    >
                      <p
                        className="option-options"
                        onClick={[Function]}
                      >
                         Order 
                      </p>
                      <p
                        className="option-options2"
                      >
                         N
                        5000
                         
                      </p>
                    </div>
                  </div>,
                ],
                "className": "display-menu-item",
                "id": undefined,
                "onMouseLeave": [Function],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": <div
                class="display-menu-item"
              >
                <div
                  class="order-add-item"
                >
                  <img
                    alt="This is a menu"
                    class="main-meal-item-img"
                    id="image-undefined"
                    src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                  />
                  <div
                    class="change-preview-image modifiableundefined"
                    style="opacity: 0; z-index: -1; display: none;"
                  >
                    <p
                      class="label-for-input"
                    >
                       Click to change Image 
                    </p>
                    <input
                      accept=".jpg, .png, .jpeg"
                      class="input-file image-undefined"
                      name="input-file"
                      type="file"
                    />
                  </div>
                </div>
                <div
                  class="item-details"
                >
                  <div
                    class="item-title-and-description"
                  >
                    <p
                      class="item-title-main editable editableundefined"
                    >
                       
                      This is a menu
                       
                    </p>
                    <p
                      class="item-description editable editableundefined"
                    >
                       
                      
                       
                    </p>
                  </div>
                  <div
                    class="buttons-array-and-togglers"
                  >
                    <p
                      class="option-options"
                    >
                       Order 
                    </p>
                    <p
                      class="option-options2"
                    >
                       N
                      5000
                       
                    </p>
                  </div>
                </div>
              </div>,
              "tag": 5,
              "treeBaseTime": 0,
              "type": "div",
              "updateQueue": null,
            },
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "dispatch": [Function],
              "displayText": "Modify",
              "handleDelete": [Function],
              "handleEdit": [Function],
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meal": Object {
                "description": "",
                "kitchenId": 2,
                "name": "This is a menu",
                "price": 5000,
              },
              "renderEditable": false,
              "wantsToEdit": false,
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "dispatch": [Function],
              "displayText": "Modify",
              "handleDelete": [Function],
              "handleEdit": [Function],
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meal": Object {
                "description": "",
                "kitchenId": 2,
                "name": "This is a menu",
                "price": 5000,
              },
              "renderEditable": false,
              "wantsToEdit": false,
            },
            "ref": null,
            "return": [Circular],
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": null,
            "tag": 1,
            "treeBaseTime": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "dispatch": [Function],
            "history": Object {
              "push": [Function],
            },
            "kitchen": Object {
              "description": "This is my test menu",
              "id": 3,
              "name": "This is great",
            },
            "meal": Object {
              "description": "",
              "kitchenId": 2,
              "name": "This is a menu",
              "price": 5000,
            },
            "renderEditable": false,
          },
          "memoizedState": Object {
            "displayText": "Modify",
            "wantsToEdit": false,
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "dispatch": [Function],
            "history": Object {
              "push": [Function],
            },
            "kitchen": Object {
              "description": "This is my test menu",
              "id": 3,
              "name": "This is great",
            },
            "meal": Object {
              "description": "",
              "kitchenId": 2,
              "name": "This is a menu",
              "price": 5000,
            },
            "renderEditable": false,
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 9,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meal": Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
                "renderEditable": false,
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meal": Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
                "renderEditable": false,
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meal": Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
                "renderEditable": false,
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 7,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 7,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseTime": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="display-menu-item"
                    >
                      <div
                        class="order-add-item"
                      >
                        <img
                          alt="This is a menu"
                          class="main-meal-item-img"
                          id="image-undefined"
                          src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                        />
                        <div
                          class="change-preview-image modifiableundefined"
                          style="opacity: 0; z-index: -1; display: none;"
                        >
                          <p
                            class="label-for-input"
                          >
                             Click to change Image 
                          </p>
                          <input
                            accept=".jpg, .png, .jpeg"
                            class="input-file image-undefined"
                            name="input-file"
                            type="file"
                          />
                        </div>
                      </div>
                      <div
                        class="item-details"
                      >
                        <div
                          class="item-title-and-description"
                        >
                          <p
                            class="item-title-main editable editableundefined"
                          >
                             
                            This is a menu
                             
                          </p>
                          <p
                            class="item-description editable editableundefined"
                          >
                             
                            
                             
                          </p>
                        </div>
                        <div
                          class="buttons-array-and-togglers"
                        >
                          <p
                            class="option-options"
                          >
                             Order 
                          </p>
                          <p
                            class="option-options2"
                          >
                             N
                            5000
                             
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "treeBaseTime": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "expirationTime": 1,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "dispatch": [Function],
                            "history": Object {
                              "push": [Function],
                            },
                            "kitchen": Object {
                              "description": "This is my test menu",
                              "id": 3,
                              "name": "This is great",
                            },
                            "meal": Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                            "renderEditable": false,
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "dispatch": [Function],
                            "history": Object {
                              "push": [Function],
                            },
                            "kitchen": Object {
                              "description": "This is my test menu",
                              "id": 3,
                              "name": "This is great",
                            },
                            "meal": Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                            "renderEditable": false,
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "effectTag": 32,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "dispatch": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meal": Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                      "renderEditable": false,
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="display-menu-item"
                  >
                    <div
                      class="order-add-item"
                    >
                      <img
                        alt="This is a menu"
                        class="main-meal-item-img"
                        id="image-undefined"
                        src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                      />
                      <div
                        class="change-preview-image modifiableundefined"
                        style="opacity: 0; z-index: -1; display: none;"
                      >
                        <p
                          class="label-for-input"
                        >
                           Click to change Image 
                        </p>
                        <input
                          accept=".jpg, .png, .jpeg"
                          class="input-file image-undefined"
                          name="input-file"
                          type="file"
                        />
                      </div>
                    </div>
                    <div
                      class="item-details"
                    >
                      <div
                        class="item-title-and-description"
                      >
                        <p
                          class="item-title-main editable editableundefined"
                        >
                           
                          This is a menu
                           
                        </p>
                        <p
                          class="item-description editable editableundefined"
                        >
                           
                          
                           
                        </p>
                      </div>
                      <div
                        class="buttons-array-and-togglers"
                      >
                        <p
                          class="option-options"
                        >
                           Order 
                        </p>
                        <p
                          class="option-options2"
                        >
                           N
                          5000
                           
                        </p>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "treeBaseTime": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "dispatch": [Function],
                        "history": Object {
                          "push": [Function],
                        },
                        "kitchen": Object {
                          "description": "This is my test menu",
                          "id": 3,
                          "name": "This is great",
                        },
                        "meal": Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                        "renderEditable": false,
                      }
                    }
                  />,
                },
                "expirationTime": 0,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "dispatch": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meal": Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                  "renderEditable": false,
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "dispatch": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meal": Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                  "renderEditable": false,
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseTime": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "selfBaseTime": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "treeBaseTime": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "handleDelete": [Function],
        "handleEdit": [Function],
        "props": Object {
          "dispatch": [Function],
          "history": Object {
            "push": [Function],
          },
          "kitchen": Object {
            "description": "This is my test menu",
            "id": 3,
            "name": "This is great",
          },
          "meal": Object {
            "description": "",
            "kitchenId": 2,
            "name": "This is a menu",
            "price": 5000,
          },
          "renderEditable": false,
        },
        "refs": Object {},
        "render": [Function],
        "state": Object {
          "displayText": "Modify",
          "wantsToEdit": false,
        },
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "dispatch": [Function],
        "history": Object {
          "push": [Function],
        },
        "kitchen": Object {
          "description": "This is my test menu",
          "id": 3,
          "name": "This is great",
        },
        "meal": Object {
          "description": "",
          "kitchenId": 2,
          "name": "This is a menu",
          "price": 5000,
        },
        "renderEditable": false,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "dispatch": [Function],
          "displayText": "Modify",
          "handleDelete": [Function],
          "handleEdit": [Function],
          "kitchen": Object {
            "description": "This is my test menu",
            "id": 3,
            "name": "This is great",
          },
          "meal": Object {
            "description": "",
            "kitchenId": 2,
            "name": "This is a menu",
            "price": 5000,
          },
          "renderEditable": false,
          "wantsToEdit": false,
        },
        "ref": null,
        "rendered": Object {
          "instance": <div
            class="display-menu-item"
          >
            <div
              class="order-add-item"
            >
              <img
                alt="This is a menu"
                class="main-meal-item-img"
                id="image-undefined"
                src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
              />
              <div
                class="change-preview-image modifiableundefined"
                style="opacity: 0; z-index: -1; display: none;"
              >
                <p
                  class="label-for-input"
                >
                   Click to change Image 
                </p>
                <input
                  accept=".jpg, .png, .jpeg"
                  class="input-file image-undefined"
                  name="input-file"
                  type="file"
                />
              </div>
            </div>
            <div
              class="item-details"
            >
              <div
                class="item-title-and-description"
              >
                <p
                  class="item-title-main editable editableundefined"
                >
                   
                  This is a menu
                   
                </p>
                <p
                  class="item-description editable editableundefined"
                >
                   
                  
                   
                </p>
              </div>
              <div
                class="buttons-array-and-togglers"
              >
                <p
                  class="option-options"
                >
                   Order 
                </p>
                <p
                  class="option-options2"
                >
                   N
                  5000
                   
                </p>
              </div>
            </div>
          </div>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="order-add-item"
              >
                <img
                  alt="This is a menu"
                  className="main-meal-item-img"
                  id="image-undefined"
                  src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                />
                <div
                  className="change-preview-image modifiableundefined"
                  style={
                    Object {
                      "display": "none",
                      "opacity": 0,
                      "zIndex": -1,
                    }
                  }
                >
                  <p
                    className="label-for-input"
                  >
                     Click to change Image 
                  </p>
                  <input
                    accept=".jpg, .png, .jpeg"
                    className="input-file image-undefined"
                    name="input-file"
                    onChange={[Function]}
                    type="file"
                  />
                </div>
              </div>,
              <div
                className="item-details"
              >
                <div
                  className="item-title-and-description"
                >
                  <p
                    className="item-title-main editable editableundefined"
                  >
                     
                    This is a menu
                     
                  </p>
                  <p
                    className="item-description editable editableundefined"
                  >
                     
                    
                     
                  </p>
                </div>
                <div
                  className="buttons-array-and-togglers"
                >
                  <p
                    className="option-options"
                    onClick={[Function]}
                  >
                     Order 
                  </p>
                  <p
                    className="option-options2"
                  >
                     N
                    5000
                     
                  </p>
                </div>
              </div>,
            ],
            "className": "display-menu-item",
            "id": undefined,
            "onMouseLeave": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <div
                class="order-add-item"
              >
                <img
                  alt="This is a menu"
                  class="main-meal-item-img"
                  id="image-undefined"
                  src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                />
                <div
                  class="change-preview-image modifiableundefined"
                  style="opacity: 0; z-index: -1; display: none;"
                >
                  <p
                    class="label-for-input"
                  >
                     Click to change Image 
                  </p>
                  <input
                    accept=".jpg, .png, .jpeg"
                    class="input-file image-undefined"
                    name="input-file"
                    type="file"
                  />
                </div>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <img
                    alt="This is a menu"
                    className="main-meal-item-img"
                    id="image-undefined"
                    src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                  />,
                  <div
                    className="change-preview-image modifiableundefined"
                    style={
                      Object {
                        "display": "none",
                        "opacity": 0,
                        "zIndex": -1,
                      }
                    }
                  >
                    <p
                      className="label-for-input"
                    >
                       Click to change Image 
                    </p>
                    <input
                      accept=".jpg, .png, .jpeg"
                      className="input-file image-undefined"
                      name="input-file"
                      onChange={[Function]}
                      type="file"
                    />
                  </div>,
                ],
                "className": "order-add-item",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <img
                    alt="This is a menu"
                    class="main-meal-item-img"
                    id="image-undefined"
                    src="https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60"
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "alt": "This is a menu",
                    "className": "main-meal-item-img",
                    "id": "image-undefined",
                    "src": "https://images.unsplash.com/photo-1453831362806-3d5577f014a4?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9dd8da96be0724ab84e4147d428f6bba&auto=format&fit=crop&w=500&q=60",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "img",
                },
                Object {
                  "instance": <div
                    class="change-preview-image modifiableundefined"
                    style="opacity: 0; z-index: -1; display: none;"
                  >
                    <p
                      class="label-for-input"
                    >
                       Click to change Image 
                    </p>
                    <input
                      accept=".jpg, .png, .jpeg"
                      class="input-file image-undefined"
                      name="input-file"
                      type="file"
                    />
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <p
                        className="label-for-input"
                      >
                         Click to change Image 
                      </p>,
                      <input
                        accept=".jpg, .png, .jpeg"
                        className="input-file image-undefined"
                        name="input-file"
                        onChange={[Function]}
                        type="file"
                      />,
                    ],
                    "className": "change-preview-image modifiableundefined",
                    "style": Object {
                      "display": "none",
                      "opacity": 0,
                      "zIndex": -1,
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <p
                        class="label-for-input"
                      >
                         Click to change Image 
                      </p>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": " Click to change Image ",
                        "className": "label-for-input",
                      },
                      "ref": null,
                      "rendered": Array [
                        " Click to change Image ",
                      ],
                      "type": "p",
                    },
                    Object {
                      "instance": <input
                        accept=".jpg, .png, .jpeg"
                        class="input-file image-undefined"
                        name="input-file"
                        type="file"
                      />,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "accept": ".jpg, .png, .jpeg",
                        "className": "input-file image-undefined",
                        "name": "input-file",
                        "onChange": [Function],
                        "type": "file",
                      },
                      "ref": null,
                      "rendered": Array [
                        undefined,
                      ],
                      "type": "input",
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": <div
                class="item-details"
              >
                <div
                  class="item-title-and-description"
                >
                  <p
                    class="item-title-main editable editableundefined"
                  >
                     
                    This is a menu
                     
                  </p>
                  <p
                    class="item-description editable editableundefined"
                  >
                     
                    
                     
                  </p>
                </div>
                <div
                  class="buttons-array-and-togglers"
                >
                  <p
                    class="option-options"
                  >
                     Order 
                  </p>
                  <p
                    class="option-options2"
                  >
                     N
                    5000
                     
                  </p>
                </div>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="item-title-and-description"
                  >
                    <p
                      className="item-title-main editable editableundefined"
                    >
                       
                      This is a menu
                       
                    </p>
                    <p
                      className="item-description editable editableundefined"
                    >
                       
                      
                       
                    </p>
                  </div>,
                  <div
                    className="buttons-array-and-togglers"
                  >
                    <p
                      className="option-options"
                      onClick={[Function]}
                    >
                       Order 
                    </p>
                    <p
                      className="option-options2"
                    >
                       N
                      5000
                       
                    </p>
                  </div>,
                ],
                "className": "item-details",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <div
                    class="item-title-and-description"
                  >
                    <p
                      class="item-title-main editable editableundefined"
                    >
                       
                      This is a menu
                       
                    </p>
                    <p
                      class="item-description editable editableundefined"
                    >
                       
                      
                       
                    </p>
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <p
                        className="item-title-main editable editableundefined"
                      >
                         
                        This is a menu
                         
                      </p>,
                      <p
                        className="item-description editable editableundefined"
                      >
                         
                        
                         
                      </p>,
                    ],
                    "className": "item-title-and-description",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <p
                        class="item-title-main editable editableundefined"
                      >
                         
                        This is a menu
                         
                      </p>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          " ",
                          "This is a menu",
                          " ",
                        ],
                        "className": "item-title-main editable editableundefined",
                      },
                      "ref": null,
                      "rendered": Array [
                        " ",
                        "This is a menu",
                        " ",
                      ],
                      "type": "p",
                    },
                    Object {
                      "instance": <p
                        class="item-description editable editableundefined"
                      >
                         
                        
                         
                      </p>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          " ",
                          "",
                          " ",
                        ],
                        "className": "item-description editable editableundefined",
                      },
                      "ref": null,
                      "rendered": Array [
                        " ",
                        "",
                        " ",
                      ],
                      "type": "p",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": <div
                    class="buttons-array-and-togglers"
                  >
                    <p
                      class="option-options"
                    >
                       Order 
                    </p>
                    <p
                      class="option-options2"
                    >
                       N
                      5000
                       
                    </p>
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <p
                        className="option-options"
                        onClick={[Function]}
                      >
                         Order 
                      </p>,
                      <p
                        className="option-options2"
                      >
                         N
                        5000
                         
                      </p>,
                    ],
                    "className": "buttons-array-and-togglers",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <p
                        class="option-options"
                      >
                         Order 
                      </p>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": " Order ",
                        "className": "option-options",
                        "onClick": [Function],
                      },
                      "ref": null,
                      "rendered": Array [
                        " Order ",
                      ],
                      "type": "p",
                    },
                    Object {
                      "instance": <p
                        class="option-options2"
                      >
                         N
                        5000
                         
                      </p>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          " N",
                          5000,
                          " ",
                        ],
                        "className": "option-options2",
                      },
                      "ref": null,
                      "rendered": Array [
                        " N",
                        "5000",
                        " ",
                      ],
                      "type": "p",
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`Show Menu Page should render menu received as props should match snashot 1`] = `
ReactWrapper {
  "length": 1,
  Symbol(enzyme.__unrendered__): <Provider
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "history": Object {
          "push": [Function],
        },
        "subscribe": [Function],
      }
    }
  >
    <RenderMenuContainer
      dispatch={[Function]}
      history={
        Object {
          "push": [Function],
        }
      }
      menus={
        Object {
          "description": "This is a test menu",
          "kitchen": Object {
            "description": "This is my test menu",
            "id": 3,
            "name": "This is great",
          },
          "meals": Array [
            Object {
              "description": "",
              "kitchenId": 2,
              "name": "This is a menu",
              "price": 5000,
            },
          ],
          "name": "Test Menu",
        }
      }
    />
  </Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": Provider {
      "__reactInternalMemoizedMergedChildContext": Object {
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "history": Object {
            "push": [Function],
          },
          "subscribe": [Function],
        },
        "storeSubscription": null,
      },
      "_reactInternalFiber": FiberNode {
        "_debugID": 5,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 4,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": null,
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "memoizedState": Object {
              "menu": undefined,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "ref": null,
            "return": [Circular],
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": RenderMenuContainer {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "componentDidMount": [Function],
              "context": Object {},
              "generateImageFromMenu": [Function],
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "refs": Object {},
              "render": [Function],
              "state": Object {
                "menu": undefined,
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseTime": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "index": 0,
          "key": null,
          "lastEffect": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": null,
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "memoizedState": Object {
              "menu": undefined,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "ref": null,
            "return": [Circular],
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": RenderMenuContainer {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "componentDidMount": [Function],
              "context": Object {},
              "generateImageFromMenu": [Function],
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "refs": Object {},
              "render": [Function],
              "state": Object {
                "menu": undefined,
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseTime": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <RenderMenuContainer
                dispatch={[Function]}
                history={
                  Object {
                    "push": [Function],
                  }
                }
                menus={
                  Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  }
                }
              />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "history": Object {
                  "push": [Function],
                },
                "subscribe": [Function],
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "children": <RenderMenuContainer
                dispatch={[Function]}
                history={
                  Object {
                    "push": [Function],
                  }
                }
                menus={
                  Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  }
                }
              />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "history": Object {
                  "push": [Function],
                },
                "subscribe": [Function],
              },
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <RenderMenuContainer
                dispatch={[Function]}
                history={
                  Object {
                    "push": [Function],
                  }
                }
                menus={
                  Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  }
                }
              />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "history": Object {
                  "push": [Function],
                },
                "subscribe": [Function],
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 1,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div />,
                "context": Object {},
                "current": [Circular],
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "treeBaseTime": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "expirationTime": 1,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RenderMenuContainer
                            dispatch={[Function]}
                            history={
                              Object {
                                "push": [Function],
                              }
                            }
                            menus={
                              Object {
                                "description": "This is a test menu",
                                "kitchen": Object {
                                  "description": "This is my test menu",
                                  "id": 3,
                                  "name": "This is great",
                                },
                                "meals": Array [
                                  Object {
                                    "description": "",
                                    "kitchenId": 2,
                                    "name": "This is a menu",
                                    "price": 5000,
                                  },
                                ],
                                "name": "Test Menu",
                              }
                            }
                          />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "history": Object {
                              "push": [Function],
                            },
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RenderMenuContainer
                            dispatch={[Function]}
                            history={
                              Object {
                                "push": [Function],
                              }
                            }
                            menus={
                              Object {
                                "description": "This is a test menu",
                                "kitchen": Object {
                                  "description": "This is my test menu",
                                  "id": 3,
                                  "name": "This is great",
                                },
                                "meals": Array [
                                  Object {
                                    "description": "",
                                    "kitchenId": 2,
                                    "name": "This is a menu",
                                    "price": 5000,
                                  },
                                ],
                                "name": "Test Menu",
                              }
                            }
                          />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "history": Object {
                              "push": [Function],
                            },
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "effectTag": 32,
            "expirationTime": 0,
            "firstEffect": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": null,
              "effectTag": 5,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "memoizedState": Object {
                "menu": undefined,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "ref": null,
              "return": [Circular],
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": RenderMenuContainer {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "componentDidMount": [Function],
                "context": Object {},
                "generateImageFromMenu": [Function],
                "props": Object {
                  "dispatch": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "menus": Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  },
                },
                "refs": Object {},
                "render": [Function],
                "state": Object {
                  "menu": undefined,
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseTime": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <RenderMenuContainer
                      dispatch={[Function]}
                      history={
                        Object {
                          "push": [Function],
                        }
                      }
                      menus={
                        Object {
                          "description": "This is a test menu",
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meals": Array [
                            Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                          ],
                          "name": "Test Menu",
                        }
                      }
                    />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "subscribe": [Function],
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div />,
              "context": Object {},
              "current": [Circular],
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "treeBaseTime": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <RenderMenuContainer
                        dispatch={[Function]}
                        history={
                          Object {
                            "push": [Function],
                          }
                        }
                        menus={
                          Object {
                            "description": "This is a test menu",
                            "kitchen": Object {
                              "description": "This is my test menu",
                              "id": 3,
                              "name": "This is great",
                            },
                            "meals": Array [
                              Object {
                                "description": "",
                                "kitchenId": 2,
                                "name": "This is a menu",
                                "price": 5000,
                              },
                            ],
                            "name": "Test Menu",
                          }
                        }
                      />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "history": Object {
                          "push": [Function],
                        },
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "expirationTime": 0,
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseTime": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <RenderMenuContainer
                  dispatch={[Function]}
                  history={
                    Object {
                      "push": [Function],
                    }
                  }
                  menus={
                    Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    }
                  }
                />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <RenderMenuContainer
                  dispatch={[Function]}
                  history={
                    Object {
                      "push": [Function],
                    }
                  }
                  menus={
                    Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    }
                  }
                />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseTime": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "effectTag": 5,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "dispatch": [Function],
            "history": Object {
              "push": [Function],
            },
            "menus": Object {
              "description": "This is a test menu",
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meals": Array [
                Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
              ],
              "name": "Test Menu",
            },
          },
          "memoizedState": Object {
            "menu": undefined,
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "dispatch": [Function],
            "history": Object {
              "push": [Function],
            },
            "menus": Object {
              "description": "This is a test menu",
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meals": Array [
                Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
              ],
              "name": "Test Menu",
            },
          },
          "ref": null,
          "return": [Circular],
          "selfBaseTime": 0,
          "sibling": null,
          "stateNode": RenderMenuContainer {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "componentDidMount": [Function],
            "context": Object {},
            "generateImageFromMenu": [Function],
            "props": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "refs": Object {},
            "render": [Function],
            "state": Object {
              "menu": undefined,
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseTime": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "effectTag": 1,
        "expirationTime": 0,
        "firstEffect": FiberNode {
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "effectTag": 5,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "dispatch": [Function],
            "history": Object {
              "push": [Function],
            },
            "menus": Object {
              "description": "This is a test menu",
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meals": Array [
                Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
              ],
              "name": "Test Menu",
            },
          },
          "memoizedState": Object {
            "menu": undefined,
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "dispatch": [Function],
            "history": Object {
              "push": [Function],
            },
            "menus": Object {
              "description": "This is a test menu",
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meals": Array [
                Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
              ],
              "name": "Test Menu",
            },
          },
          "ref": null,
          "return": [Circular],
          "selfBaseTime": 0,
          "sibling": null,
          "stateNode": RenderMenuContainer {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "componentDidMount": [Function],
            "context": Object {},
            "generateImageFromMenu": [Function],
            "props": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "refs": Object {},
            "render": [Function],
            "state": Object {
              "menu": undefined,
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseTime": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "index": 0,
        "key": null,
        "lastEffect": FiberNode {
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "effectTag": 5,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "dispatch": [Function],
            "history": Object {
              "push": [Function],
            },
            "menus": Object {
              "description": "This is a test menu",
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meals": Array [
                Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
              ],
              "name": "Test Menu",
            },
          },
          "memoizedState": Object {
            "menu": undefined,
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "dispatch": [Function],
            "history": Object {
              "push": [Function],
            },
            "menus": Object {
              "description": "This is a test menu",
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meals": Array [
                Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
              ],
              "name": "Test Menu",
            },
          },
          "ref": null,
          "return": [Circular],
          "selfBaseTime": 0,
          "sibling": null,
          "stateNode": RenderMenuContainer {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "componentDidMount": [Function],
            "context": Object {},
            "generateImageFromMenu": [Function],
            "props": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "refs": Object {},
            "render": [Function],
            "state": Object {
              "menu": undefined,
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseTime": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "memoizedProps": Object {
          "children": <RenderMenuContainer
            dispatch={[Function]}
            history={
              Object {
                "push": [Function],
              }
            }
            menus={
              Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              }
            }
          />,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "history": Object {
              "push": [Function],
            },
            "subscribe": [Function],
          },
        },
        "memoizedState": null,
        "mode": 0,
        "nextEffect": null,
        "pendingProps": Object {
          "children": <RenderMenuContainer
            dispatch={[Function]}
            history={
              Object {
                "push": [Function],
              }
            }
            menus={
              Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              }
            }
          />,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "history": Object {
              "push": [Function],
            },
            "subscribe": [Function],
          },
        },
        "ref": null,
        "return": FiberNode {
          "_debugID": 4,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": [Circular],
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": null,
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "memoizedState": Object {
              "menu": undefined,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "ref": null,
            "return": [Circular],
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": RenderMenuContainer {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "componentDidMount": [Function],
              "context": Object {},
              "generateImageFromMenu": [Function],
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "refs": Object {},
              "render": [Function],
              "state": Object {
                "menu": undefined,
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseTime": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "index": 0,
          "key": null,
          "lastEffect": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": null,
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "memoizedState": Object {
              "menu": undefined,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "ref": null,
            "return": [Circular],
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": RenderMenuContainer {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "componentDidMount": [Function],
              "context": Object {},
              "generateImageFromMenu": [Function],
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "refs": Object {},
              "render": [Function],
              "state": Object {
                "menu": undefined,
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseTime": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <RenderMenuContainer
                dispatch={[Function]}
                history={
                  Object {
                    "push": [Function],
                  }
                }
                menus={
                  Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  }
                }
              />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "history": Object {
                  "push": [Function],
                },
                "subscribe": [Function],
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "children": <RenderMenuContainer
                dispatch={[Function]}
                history={
                  Object {
                    "push": [Function],
                  }
                }
                menus={
                  Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  }
                }
              />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "history": Object {
                  "push": [Function],
                },
                "subscribe": [Function],
              },
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <RenderMenuContainer
                dispatch={[Function]}
                history={
                  Object {
                    "push": [Function],
                  }
                }
                menus={
                  Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  }
                }
              />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "history": Object {
                  "push": [Function],
                },
                "subscribe": [Function],
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 1,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": [Circular],
              "child": null,
              "effectTag": 0,
              "expirationTime": 1,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div />,
                "context": Object {},
                "current": [Circular],
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "treeBaseTime": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "expirationTime": 1,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RenderMenuContainer
                            dispatch={[Function]}
                            history={
                              Object {
                                "push": [Function],
                              }
                            }
                            menus={
                              Object {
                                "description": "This is a test menu",
                                "kitchen": Object {
                                  "description": "This is my test menu",
                                  "id": 3,
                                  "name": "This is great",
                                },
                                "meals": Array [
                                  Object {
                                    "description": "",
                                    "kitchenId": 2,
                                    "name": "This is a menu",
                                    "price": 5000,
                                  },
                                ],
                                "name": "Test Menu",
                              }
                            }
                          />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "history": Object {
                              "push": [Function],
                            },
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RenderMenuContainer
                            dispatch={[Function]}
                            history={
                              Object {
                                "push": [Function],
                              }
                            }
                            menus={
                              Object {
                                "description": "This is a test menu",
                                "kitchen": Object {
                                  "description": "This is my test menu",
                                  "id": 3,
                                  "name": "This is great",
                                },
                                "meals": Array [
                                  Object {
                                    "description": "",
                                    "kitchenId": 2,
                                    "name": "This is a menu",
                                    "price": 5000,
                                  },
                                ],
                                "name": "Test Menu",
                              }
                            }
                          />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "history": Object {
                              "push": [Function],
                            },
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "effectTag": 32,
            "expirationTime": 0,
            "firstEffect": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": null,
              "effectTag": 5,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "memoizedState": Object {
                "menu": undefined,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "ref": null,
              "return": [Circular],
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": RenderMenuContainer {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "componentDidMount": [Function],
                "context": Object {},
                "generateImageFromMenu": [Function],
                "props": Object {
                  "dispatch": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "menus": Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  },
                },
                "refs": Object {},
                "render": [Function],
                "state": Object {
                  "menu": undefined,
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseTime": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <RenderMenuContainer
                      dispatch={[Function]}
                      history={
                        Object {
                          "push": [Function],
                        }
                      }
                      menus={
                        Object {
                          "description": "This is a test menu",
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meals": Array [
                            Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                          ],
                          "name": "Test Menu",
                        }
                      }
                    />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "subscribe": [Function],
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div />,
              "context": Object {},
              "current": [Circular],
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "remainingExpirationTime": 0,
            },
            "tag": 3,
            "treeBaseTime": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <RenderMenuContainer
                        dispatch={[Function]}
                        history={
                          Object {
                            "push": [Function],
                          }
                        }
                        menus={
                          Object {
                            "description": "This is a test menu",
                            "kitchen": Object {
                              "description": "This is my test menu",
                              "id": 3,
                              "name": "This is great",
                            },
                            "meals": Array [
                              Object {
                                "description": "",
                                "kitchenId": 2,
                                "name": "This is a menu",
                                "price": 5000,
                              },
                            ],
                            "name": "Test Menu",
                          }
                        }
                      />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "history": Object {
                          "push": [Function],
                        },
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "expirationTime": 0,
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseTime": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <RenderMenuContainer
                  dispatch={[Function]}
                  history={
                    Object {
                      "push": [Function],
                    }
                  }
                  menus={
                    Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    }
                  }
                />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <RenderMenuContainer
                  dispatch={[Function]}
                  history={
                    Object {
                      "push": [Function],
                    }
                  }
                  menus={
                    Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    }
                  }
                />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseTime": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "selfBaseTime": 0,
        "sibling": null,
        "stateNode": [Circular],
        "tag": 2,
        "treeBaseTime": 0,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "props": Object {
        "children": <RenderMenuContainer
          dispatch={[Function]}
          history={
            Object {
              "push": [Function],
            }
          }
          menus={
            Object {
              "description": "This is a test menu",
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meals": Array [
                Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
              ],
              "name": "Test Menu",
            }
          }
        />,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "history": Object {
            "push": [Function],
          },
          "subscribe": [Function],
        },
      },
      "refs": Object {},
      "state": null,
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "history": Object {
          "push": [Function],
        },
        "subscribe": [Function],
      },
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <RenderMenuContainer
        dispatch={[Function]}
        history={
          Object {
            "push": [Function],
          }
        }
        menus={
          Object {
            "description": "This is a test menu",
            "kitchen": Object {
              "description": "This is my test menu",
              "id": 3,
              "name": "This is great",
            },
            "meals": Array [
              Object {
                "description": "",
                "kitchenId": 2,
                "name": "This is a menu",
                "price": 5000,
              },
            ],
            "name": "Test Menu",
          }
        }
      />,
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "history": Object {
          "push": [Function],
        },
        "subscribe": [Function],
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": RenderMenuContainer {
        "_reactInternalFiber": FiberNode {
          "_debugID": 6,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "alternate": null,
          "child": null,
          "effectTag": 5,
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "dispatch": [Function],
            "history": Object {
              "push": [Function],
            },
            "menus": Object {
              "description": "This is a test menu",
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meals": Array [
                Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
              ],
              "name": "Test Menu",
            },
          },
          "memoizedState": Object {
            "menu": undefined,
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "dispatch": [Function],
            "history": Object {
              "push": [Function],
            },
            "menus": Object {
              "description": "This is a test menu",
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meals": Array [
                Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
              ],
              "name": "Test Menu",
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 5,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugID": 4,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": [Circular],
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RenderMenuContainer
                    dispatch={[Function]}
                    history={
                      Object {
                        "push": [Function],
                      }
                    }
                    menus={
                      Object {
                        "description": "This is a test menu",
                        "kitchen": Object {
                          "description": "This is my test menu",
                          "id": 3,
                          "name": "This is great",
                        },
                        "meals": Array [
                          Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                        ],
                        "name": "Test Menu",
                      }
                    }
                  />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "subscribe": [Function],
                  },
                },
              },
              "memoizedState": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <RenderMenuContainer
                    dispatch={[Function]}
                    history={
                      Object {
                        "push": [Function],
                      }
                    }
                    menus={
                      Object {
                        "description": "This is a test menu",
                        "kitchen": Object {
                          "description": "This is my test menu",
                          "id": 3,
                          "name": "This is great",
                        },
                        "meals": Array [
                          Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                        ],
                        "name": "Test Menu",
                      }
                    }
                  />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "subscribe": [Function],
                  },
                },
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RenderMenuContainer
                    dispatch={[Function]}
                    history={
                      Object {
                        "push": [Function],
                      }
                    }
                    menus={
                      Object {
                        "description": "This is a test menu",
                        "kitchen": Object {
                          "description": "This is my test menu",
                          "id": 3,
                          "name": "This is great",
                        },
                        "meals": Array [
                          Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                        ],
                        "name": "Test Menu",
                      }
                    }
                  />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "subscribe": [Function],
                  },
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": FiberNode {
                  "_debugID": 1,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": [Circular],
                  "child": null,
                  "effectTag": 0,
                  "expirationTime": 1,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseTime": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div />,
                    "context": Object {},
                    "current": [Circular],
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "remainingExpirationTime": 0,
                  },
                  "tag": 3,
                  "treeBaseTime": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "expirationTime": 1,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RenderMenuContainer
                                dispatch={[Function]}
                                history={
                                  Object {
                                    "push": [Function],
                                  }
                                }
                                menus={
                                  Object {
                                    "description": "This is a test menu",
                                    "kitchen": Object {
                                      "description": "This is my test menu",
                                      "id": 3,
                                      "name": "This is great",
                                    },
                                    "meals": Array [
                                      Object {
                                        "description": "",
                                        "kitchenId": 2,
                                        "name": "This is a menu",
                                        "price": 5000,
                                      },
                                    ],
                                    "name": "Test Menu",
                                  }
                                }
                              />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "history": Object {
                                  "push": [Function],
                                },
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RenderMenuContainer
                                dispatch={[Function]}
                                history={
                                  Object {
                                    "push": [Function],
                                  }
                                }
                                menus={
                                  Object {
                                    "description": "This is a test menu",
                                    "kitchen": Object {
                                      "description": "This is my test menu",
                                      "id": 3,
                                      "name": "This is great",
                                    },
                                    "meals": Array [
                                      Object {
                                        "description": "",
                                        "kitchenId": 2,
                                        "name": "This is a menu",
                                        "price": 5000,
                                      },
                                    ],
                                    "name": "Test Menu",
                                  }
                                }
                              />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "history": Object {
                                  "push": [Function],
                                },
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "effectTag": 32,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <RenderMenuContainer
                          dispatch={[Function]}
                          history={
                            Object {
                              "push": [Function],
                            }
                          }
                          menus={
                            Object {
                              "description": "This is a test menu",
                              "kitchen": Object {
                                "description": "This is my test menu",
                                "id": 3,
                                "name": "This is great",
                              },
                              "meals": Array [
                                Object {
                                  "description": "",
                                  "kitchenId": 2,
                                  "name": "This is a menu",
                                  "price": 5000,
                                },
                              ],
                              "name": "Test Menu",
                            }
                          }
                        />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "history": Object {
                            "push": [Function],
                          },
                          "subscribe": [Function],
                        },
                      }
                    }
                  />,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseTime": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div />,
                  "context": Object {},
                  "current": [Circular],
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "treeBaseTime": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RenderMenuContainer
                            dispatch={[Function]}
                            history={
                              Object {
                                "push": [Function],
                              }
                            }
                            menus={
                              Object {
                                "description": "This is a test menu",
                                "kitchen": Object {
                                  "description": "This is my test menu",
                                  "id": 3,
                                  "name": "This is great",
                                },
                                "meals": Array [
                                  Object {
                                    "description": "",
                                    "kitchenId": 2,
                                    "name": "This is a menu",
                                    "price": 5000,
                                  },
                                ],
                                "name": "Test Menu",
                              }
                            }
                          />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "history": Object {
                              "push": [Function],
                            },
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "expirationTime": 0,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": WrapperComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RenderMenuContainer
                      dispatch={[Function]}
                      history={
                        Object {
                          "push": [Function],
                        }
                      }
                      menus={
                        Object {
                          "description": "This is a test menu",
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meals": Array [
                            Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                          ],
                          "name": "Test Menu",
                        }
                      }
                    />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "subscribe": [Function],
                    },
                  },
                },
                "refs": Object {},
                "state": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <RenderMenuContainer
                      dispatch={[Function]}
                      history={
                        Object {
                          "push": [Function],
                        }
                      }
                      menus={
                        Object {
                          "description": "This is a test menu",
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meals": Array [
                            Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                          ],
                          "name": "Test Menu",
                        }
                      }
                    />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "subscribe": [Function],
                    },
                  },
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseTime": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "children": <RenderMenuContainer
                dispatch={[Function]}
                history={
                  Object {
                    "push": [Function],
                  }
                }
                menus={
                  Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  }
                }
              />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "history": Object {
                  "push": [Function],
                },
                "subscribe": [Function],
              },
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": <RenderMenuContainer
                dispatch={[Function]}
                history={
                  Object {
                    "push": [Function],
                  }
                }
                menus={
                  Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  }
                }
              />,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "history": Object {
                  "push": [Function],
                },
                "subscribe": [Function],
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 4,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": [Circular],
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RenderMenuContainer
                    dispatch={[Function]}
                    history={
                      Object {
                        "push": [Function],
                      }
                    }
                    menus={
                      Object {
                        "description": "This is a test menu",
                        "kitchen": Object {
                          "description": "This is my test menu",
                          "id": 3,
                          "name": "This is great",
                        },
                        "meals": Array [
                          Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                        ],
                        "name": "Test Menu",
                      }
                    }
                  />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "subscribe": [Function],
                  },
                },
              },
              "memoizedState": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <RenderMenuContainer
                    dispatch={[Function]}
                    history={
                      Object {
                        "push": [Function],
                      }
                    }
                    menus={
                      Object {
                        "description": "This is a test menu",
                        "kitchen": Object {
                          "description": "This is my test menu",
                          "id": 3,
                          "name": "This is great",
                        },
                        "meals": Array [
                          Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                        ],
                        "name": "Test Menu",
                      }
                    }
                  />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "subscribe": [Function],
                  },
                },
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RenderMenuContainer
                    dispatch={[Function]}
                    history={
                      Object {
                        "push": [Function],
                      }
                    }
                    menus={
                      Object {
                        "description": "This is a test menu",
                        "kitchen": Object {
                          "description": "This is my test menu",
                          "id": 3,
                          "name": "This is great",
                        },
                        "meals": Array [
                          Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                        ],
                        "name": "Test Menu",
                      }
                    }
                  />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "subscribe": [Function],
                  },
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": FiberNode {
                  "_debugID": 1,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": [Circular],
                  "child": null,
                  "effectTag": 0,
                  "expirationTime": 1,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseTime": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div />,
                    "context": Object {},
                    "current": [Circular],
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "remainingExpirationTime": 0,
                  },
                  "tag": 3,
                  "treeBaseTime": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "expirationTime": 1,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RenderMenuContainer
                                dispatch={[Function]}
                                history={
                                  Object {
                                    "push": [Function],
                                  }
                                }
                                menus={
                                  Object {
                                    "description": "This is a test menu",
                                    "kitchen": Object {
                                      "description": "This is my test menu",
                                      "id": 3,
                                      "name": "This is great",
                                    },
                                    "meals": Array [
                                      Object {
                                        "description": "",
                                        "kitchenId": 2,
                                        "name": "This is a menu",
                                        "price": 5000,
                                      },
                                    ],
                                    "name": "Test Menu",
                                  }
                                }
                              />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "history": Object {
                                  "push": [Function],
                                },
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <RenderMenuContainer
                                dispatch={[Function]}
                                history={
                                  Object {
                                    "push": [Function],
                                  }
                                }
                                menus={
                                  Object {
                                    "description": "This is a test menu",
                                    "kitchen": Object {
                                      "description": "This is my test menu",
                                      "id": 3,
                                      "name": "This is great",
                                    },
                                    "meals": Array [
                                      Object {
                                        "description": "",
                                        "kitchenId": 2,
                                        "name": "This is a menu",
                                        "price": 5000,
                                      },
                                    ],
                                    "name": "Test Menu",
                                  }
                                }
                              />,
                              "store": Object {
                                "dispatch": [Function],
                                "getState": [Function],
                                "history": Object {
                                  "push": [Function],
                                },
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "effectTag": 32,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <RenderMenuContainer
                          dispatch={[Function]}
                          history={
                            Object {
                              "push": [Function],
                            }
                          }
                          menus={
                            Object {
                              "description": "This is a test menu",
                              "kitchen": Object {
                                "description": "This is my test menu",
                                "id": 3,
                                "name": "This is great",
                              },
                              "meals": Array [
                                Object {
                                  "description": "",
                                  "kitchenId": 2,
                                  "name": "This is a menu",
                                  "price": 5000,
                                },
                              ],
                              "name": "Test Menu",
                            }
                          }
                        />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "history": Object {
                            "push": [Function],
                          },
                          "subscribe": [Function],
                        },
                      }
                    }
                  />,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseTime": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div />,
                  "context": Object {},
                  "current": [Circular],
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "treeBaseTime": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RenderMenuContainer
                            dispatch={[Function]}
                            history={
                              Object {
                                "push": [Function],
                              }
                            }
                            menus={
                              Object {
                                "description": "This is a test menu",
                                "kitchen": Object {
                                  "description": "This is my test menu",
                                  "id": 3,
                                  "name": "This is great",
                                },
                                "meals": Array [
                                  Object {
                                    "description": "",
                                    "kitchenId": 2,
                                    "name": "This is a menu",
                                    "price": 5000,
                                  },
                                ],
                                "name": "Test Menu",
                              }
                            }
                          />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "history": Object {
                              "push": [Function],
                            },
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "expirationTime": 0,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": WrapperComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RenderMenuContainer
                      dispatch={[Function]}
                      history={
                        Object {
                          "push": [Function],
                        }
                      }
                      menus={
                        Object {
                          "description": "This is a test menu",
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meals": Array [
                            Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                          ],
                          "name": "Test Menu",
                        }
                      }
                    />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "subscribe": [Function],
                    },
                  },
                },
                "refs": Object {},
                "state": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <RenderMenuContainer
                      dispatch={[Function]}
                      history={
                        Object {
                          "push": [Function],
                        }
                      }
                      menus={
                        Object {
                          "description": "This is a test menu",
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meals": Array [
                            Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                          ],
                          "name": "Test Menu",
                        }
                      }
                    />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "subscribe": [Function],
                    },
                  },
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseTime": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": Provider {
              "__reactInternalMemoizedMergedChildContext": Object {
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
                "storeSubscription": null,
              },
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "children": <RenderMenuContainer
                  dispatch={[Function]}
                  history={
                    Object {
                      "push": [Function],
                    }
                  }
                  menus={
                    Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    }
                  }
                />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
              },
              "refs": Object {},
              "state": null,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "history": Object {
                  "push": [Function],
                },
                "subscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseTime": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "selfBaseTime": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "treeBaseTime": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "componentDidMount": [Function],
        "context": Object {},
        "generateImageFromMenu": [Function],
        "props": Object {
          "dispatch": [Function],
          "history": Object {
            "push": [Function],
          },
          "menus": Object {
            "description": "This is a test menu",
            "kitchen": Object {
              "description": "This is my test menu",
              "id": 3,
              "name": "This is great",
            },
            "meals": Array [
              Object {
                "description": "",
                "kitchenId": 2,
                "name": "This is a menu",
                "price": 5000,
              },
            ],
            "name": "Test Menu",
          },
        },
        "refs": Object {},
        "render": [Function],
        "state": Object {
          "menu": undefined,
        },
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "dispatch": [Function],
        "history": Object {
          "push": [Function],
        },
        "menus": Object {
          "description": "This is a test menu",
          "kitchen": Object {
            "description": "This is my test menu",
            "id": 3,
            "name": "This is great",
          },
          "meals": Array [
            Object {
              "description": "",
              "kitchenId": 2,
              "name": "This is a menu",
              "price": 5000,
            },
          ],
          "name": "Test Menu",
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": Provider {
        "__reactInternalMemoizedMergedChildContext": Object {
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "history": Object {
              "push": [Function],
            },
            "subscribe": [Function],
          },
          "storeSubscription": null,
        },
        "_reactInternalFiber": FiberNode {
          "_debugID": 5,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 4,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": null,
              "effectTag": 5,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "memoizedState": Object {
                "menu": undefined,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "ref": null,
              "return": [Circular],
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": RenderMenuContainer {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "componentDidMount": [Function],
                "context": Object {},
                "generateImageFromMenu": [Function],
                "props": Object {
                  "dispatch": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "menus": Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  },
                },
                "refs": Object {},
                "render": [Function],
                "state": Object {
                  "menu": undefined,
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseTime": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "index": 0,
            "key": null,
            "lastEffect": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": null,
              "effectTag": 5,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "memoizedState": Object {
                "menu": undefined,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "ref": null,
              "return": [Circular],
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": RenderMenuContainer {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "componentDidMount": [Function],
                "context": Object {},
                "generateImageFromMenu": [Function],
                "props": Object {
                  "dispatch": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "menus": Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  },
                },
                "refs": Object {},
                "render": [Function],
                "state": Object {
                  "menu": undefined,
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseTime": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <RenderMenuContainer
                  dispatch={[Function]}
                  history={
                    Object {
                      "push": [Function],
                    }
                  }
                  menus={
                    Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    }
                  }
                />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <RenderMenuContainer
                  dispatch={[Function]}
                  history={
                    Object {
                      "push": [Function],
                    }
                  }
                  menus={
                    Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    }
                  }
                />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <RenderMenuContainer
                  dispatch={[Function]}
                  history={
                    Object {
                      "push": [Function],
                    }
                  }
                  menus={
                    Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    }
                  }
                />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseTime": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div />,
                  "context": Object {},
                  "current": [Circular],
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "treeBaseTime": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "expirationTime": 1,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RenderMenuContainer
                              dispatch={[Function]}
                              history={
                                Object {
                                  "push": [Function],
                                }
                              }
                              menus={
                                Object {
                                  "description": "This is a test menu",
                                  "kitchen": Object {
                                    "description": "This is my test menu",
                                    "id": 3,
                                    "name": "This is great",
                                  },
                                  "meals": Array [
                                    Object {
                                      "description": "",
                                      "kitchenId": 2,
                                      "name": "This is a menu",
                                      "price": 5000,
                                    },
                                  ],
                                  "name": "Test Menu",
                                }
                              }
                            />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "history": Object {
                                "push": [Function],
                              },
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RenderMenuContainer
                              dispatch={[Function]}
                              history={
                                Object {
                                  "push": [Function],
                                }
                              }
                              menus={
                                Object {
                                  "description": "This is a test menu",
                                  "kitchen": Object {
                                    "description": "This is my test menu",
                                    "id": 3,
                                    "name": "This is great",
                                  },
                                  "meals": Array [
                                    Object {
                                      "description": "",
                                      "kitchenId": 2,
                                      "name": "This is a menu",
                                      "price": 5000,
                                    },
                                  ],
                                  "name": "Test Menu",
                                }
                              }
                            />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "history": Object {
                                "push": [Function],
                              },
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "effectTag": 32,
              "expirationTime": 0,
              "firstEffect": FiberNode {
                "_debugID": 6,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": null,
                "child": null,
                "effectTag": 5,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "dispatch": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "menus": Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  },
                },
                "memoizedState": Object {
                  "menu": undefined,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "dispatch": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "menus": Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  },
                },
                "ref": null,
                "return": [Circular],
                "selfBaseTime": 0,
                "sibling": null,
                "stateNode": RenderMenuContainer {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "componentDidMount": [Function],
                  "context": Object {},
                  "generateImageFromMenu": [Function],
                  "props": Object {
                    "dispatch": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "menus": Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    },
                  },
                  "refs": Object {},
                  "render": [Function],
                  "state": Object {
                    "menu": undefined,
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseTime": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <RenderMenuContainer
                        dispatch={[Function]}
                        history={
                          Object {
                            "push": [Function],
                          }
                        }
                        menus={
                          Object {
                            "description": "This is a test menu",
                            "kitchen": Object {
                              "description": "This is my test menu",
                              "id": 3,
                              "name": "This is great",
                            },
                            "meals": Array [
                              Object {
                                "description": "",
                                "kitchenId": 2,
                                "name": "This is a menu",
                                "price": 5000,
                              },
                            ],
                            "name": "Test Menu",
                          }
                        }
                      />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "history": Object {
                          "push": [Function],
                        },
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div />,
                "context": Object {},
                "current": [Circular],
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "treeBaseTime": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <RenderMenuContainer
                          dispatch={[Function]}
                          history={
                            Object {
                              "push": [Function],
                            }
                          }
                          menus={
                            Object {
                              "description": "This is a test menu",
                              "kitchen": Object {
                                "description": "This is my test menu",
                                "id": 3,
                                "name": "This is great",
                              },
                              "meals": Array [
                                Object {
                                  "description": "",
                                  "kitchenId": 2,
                                  "name": "This is a menu",
                                  "price": 5000,
                                },
                              ],
                              "name": "Test Menu",
                            }
                          }
                        />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "history": Object {
                            "push": [Function],
                          },
                          "subscribe": [Function],
                        },
                      }
                    }
                  />,
                },
                "expirationTime": 0,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RenderMenuContainer
                    dispatch={[Function]}
                    history={
                      Object {
                        "push": [Function],
                      }
                    }
                    menus={
                      Object {
                        "description": "This is a test menu",
                        "kitchen": Object {
                          "description": "This is my test menu",
                          "id": 3,
                          "name": "This is great",
                        },
                        "meals": Array [
                          Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                        ],
                        "name": "Test Menu",
                      }
                    }
                  />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "subscribe": [Function],
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <RenderMenuContainer
                    dispatch={[Function]}
                    history={
                      Object {
                        "push": [Function],
                      }
                    }
                    menus={
                      Object {
                        "description": "This is a test menu",
                        "kitchen": Object {
                          "description": "This is my test menu",
                          "id": 3,
                          "name": "This is great",
                        },
                        "meals": Array [
                          Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                        ],
                        "name": "Test Menu",
                      }
                    }
                  />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "subscribe": [Function],
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseTime": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": null,
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "memoizedState": Object {
              "menu": undefined,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "ref": null,
            "return": [Circular],
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": RenderMenuContainer {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "componentDidMount": [Function],
              "context": Object {},
              "generateImageFromMenu": [Function],
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "refs": Object {},
              "render": [Function],
              "state": Object {
                "menu": undefined,
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseTime": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "effectTag": 1,
          "expirationTime": 0,
          "firstEffect": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": null,
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "memoizedState": Object {
              "menu": undefined,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "ref": null,
            "return": [Circular],
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": RenderMenuContainer {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "componentDidMount": [Function],
              "context": Object {},
              "generateImageFromMenu": [Function],
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "refs": Object {},
              "render": [Function],
              "state": Object {
                "menu": undefined,
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseTime": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "index": 0,
          "key": null,
          "lastEffect": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": null,
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "memoizedState": Object {
              "menu": undefined,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "ref": null,
            "return": [Circular],
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": RenderMenuContainer {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "componentDidMount": [Function],
              "context": Object {},
              "generateImageFromMenu": [Function],
              "props": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "refs": Object {},
              "render": [Function],
              "state": Object {
                "menu": undefined,
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseTime": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "memoizedProps": Object {
            "children": <RenderMenuContainer
              dispatch={[Function]}
              history={
                Object {
                  "push": [Function],
                }
              }
              menus={
                Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                }
              }
            />,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "history": Object {
                "push": [Function],
              },
              "subscribe": [Function],
            },
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": <RenderMenuContainer
              dispatch={[Function]}
              history={
                Object {
                  "push": [Function],
                }
              }
              menus={
                Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                }
              }
            />,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "history": Object {
                "push": [Function],
              },
              "subscribe": [Function],
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 4,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": [Circular],
            "effectTag": 1,
            "expirationTime": 0,
            "firstEffect": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": null,
              "effectTag": 5,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "memoizedState": Object {
                "menu": undefined,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "ref": null,
              "return": [Circular],
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": RenderMenuContainer {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "componentDidMount": [Function],
                "context": Object {},
                "generateImageFromMenu": [Function],
                "props": Object {
                  "dispatch": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "menus": Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  },
                },
                "refs": Object {},
                "render": [Function],
                "state": Object {
                  "menu": undefined,
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseTime": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "index": 0,
            "key": null,
            "lastEffect": FiberNode {
              "_debugID": 6,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": null,
              "child": null,
              "effectTag": 5,
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "memoizedState": Object {
                "menu": undefined,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "dispatch": [Function],
                "history": Object {
                  "push": [Function],
                },
                "menus": Object {
                  "description": "This is a test menu",
                  "kitchen": Object {
                    "description": "This is my test menu",
                    "id": 3,
                    "name": "This is great",
                  },
                  "meals": Array [
                    Object {
                      "description": "",
                      "kitchenId": 2,
                      "name": "This is a menu",
                      "price": 5000,
                    },
                  ],
                  "name": "Test Menu",
                },
              },
              "ref": null,
              "return": [Circular],
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": RenderMenuContainer {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "componentDidMount": [Function],
                "context": Object {},
                "generateImageFromMenu": [Function],
                "props": Object {
                  "dispatch": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "menus": Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  },
                },
                "refs": Object {},
                "render": [Function],
                "state": Object {
                  "menu": undefined,
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseTime": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <RenderMenuContainer
                  dispatch={[Function]}
                  history={
                    Object {
                      "push": [Function],
                    }
                  }
                  menus={
                    Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    }
                  }
                />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <RenderMenuContainer
                  dispatch={[Function]}
                  history={
                    Object {
                      "push": [Function],
                    }
                  }
                  menus={
                    Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    }
                  }
                />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <RenderMenuContainer
                  dispatch={[Function]}
                  history={
                    Object {
                      "push": [Function],
                    }
                  }
                  menus={
                    Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    }
                  }
                />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 1,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "alternate": FiberNode {
                "_debugID": 1,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": [Circular],
                "child": null,
                "effectTag": 0,
                "expirationTime": 1,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseTime": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div />,
                  "context": Object {},
                  "current": [Circular],
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "remainingExpirationTime": 0,
                },
                "tag": 3,
                "treeBaseTime": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "expirationTime": 1,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RenderMenuContainer
                              dispatch={[Function]}
                              history={
                                Object {
                                  "push": [Function],
                                }
                              }
                              menus={
                                Object {
                                  "description": "This is a test menu",
                                  "kitchen": Object {
                                    "description": "This is my test menu",
                                    "id": 3,
                                    "name": "This is great",
                                  },
                                  "meals": Array [
                                    Object {
                                      "description": "",
                                      "kitchenId": 2,
                                      "name": "This is a menu",
                                      "price": 5000,
                                    },
                                  ],
                                  "name": "Test Menu",
                                }
                              }
                            />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "history": Object {
                                "push": [Function],
                              },
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RenderMenuContainer
                              dispatch={[Function]}
                              history={
                                Object {
                                  "push": [Function],
                                }
                              }
                              menus={
                                Object {
                                  "description": "This is a test menu",
                                  "kitchen": Object {
                                    "description": "This is my test menu",
                                    "id": 3,
                                    "name": "This is great",
                                  },
                                  "meals": Array [
                                    Object {
                                      "description": "",
                                      "kitchenId": 2,
                                      "name": "This is a menu",
                                      "price": 5000,
                                    },
                                  ],
                                  "name": "Test Menu",
                                }
                              }
                            />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "history": Object {
                                "push": [Function],
                              },
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "effectTag": 32,
              "expirationTime": 0,
              "firstEffect": FiberNode {
                "_debugID": 6,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": null,
                "child": null,
                "effectTag": 5,
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "dispatch": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "menus": Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  },
                },
                "memoizedState": Object {
                  "menu": undefined,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "dispatch": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "menus": Object {
                    "description": "This is a test menu",
                    "kitchen": Object {
                      "description": "This is my test menu",
                      "id": 3,
                      "name": "This is great",
                    },
                    "meals": Array [
                      Object {
                        "description": "",
                        "kitchenId": 2,
                        "name": "This is a menu",
                        "price": 5000,
                      },
                    ],
                    "name": "Test Menu",
                  },
                },
                "ref": null,
                "return": [Circular],
                "selfBaseTime": 0,
                "sibling": null,
                "stateNode": RenderMenuContainer {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "componentDidMount": [Function],
                  "context": Object {},
                  "generateImageFromMenu": [Function],
                  "props": Object {
                    "dispatch": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "menus": Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    },
                  },
                  "refs": Object {},
                  "render": [Function],
                  "state": Object {
                    "menu": undefined,
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseTime": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <RenderMenuContainer
                        dispatch={[Function]}
                        history={
                          Object {
                            "push": [Function],
                          }
                        }
                        menus={
                          Object {
                            "description": "This is a test menu",
                            "kitchen": Object {
                              "description": "This is my test menu",
                              "id": 3,
                              "name": "This is great",
                            },
                            "meals": Array [
                              Object {
                                "description": "",
                                "kitchenId": 2,
                                "name": "This is a menu",
                                "price": 5000,
                              },
                            ],
                            "name": "Test Menu",
                          }
                        }
                      />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "history": Object {
                          "push": [Function],
                        },
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div />,
                "context": Object {},
                "current": [Circular],
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "remainingExpirationTime": 0,
              },
              "tag": 3,
              "treeBaseTime": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <RenderMenuContainer
                          dispatch={[Function]}
                          history={
                            Object {
                              "push": [Function],
                            }
                          }
                          menus={
                            Object {
                              "description": "This is a test menu",
                              "kitchen": Object {
                                "description": "This is my test menu",
                                "id": 3,
                                "name": "This is great",
                              },
                              "meals": Array [
                                Object {
                                  "description": "",
                                  "kitchenId": 2,
                                  "name": "This is a menu",
                                  "price": 5000,
                                },
                              ],
                              "name": "Test Menu",
                            }
                          }
                        />,
                        "store": Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "history": Object {
                            "push": [Function],
                          },
                          "subscribe": [Function],
                        },
                      }
                    }
                  />,
                },
                "expirationTime": 0,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <RenderMenuContainer
                    dispatch={[Function]}
                    history={
                      Object {
                        "push": [Function],
                      }
                    }
                    menus={
                      Object {
                        "description": "This is a test menu",
                        "kitchen": Object {
                          "description": "This is my test menu",
                          "id": 3,
                          "name": "This is great",
                        },
                        "meals": Array [
                          Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                        ],
                        "name": "Test Menu",
                      }
                    }
                  />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "subscribe": [Function],
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <RenderMenuContainer
                    dispatch={[Function]}
                    history={
                      Object {
                        "push": [Function],
                      }
                    }
                    menus={
                      Object {
                        "description": "This is a test menu",
                        "kitchen": Object {
                          "description": "This is my test menu",
                          "id": 3,
                          "name": "This is great",
                        },
                        "meals": Array [
                          Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                        ],
                        "name": "Test Menu",
                      }
                    }
                  />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "subscribe": [Function],
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseTime": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "selfBaseTime": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "treeBaseTime": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "props": Object {
          "children": <RenderMenuContainer
            dispatch={[Function]}
            history={
              Object {
                "push": [Function],
              }
            }
            menus={
              Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              }
            }
          />,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "history": Object {
              "push": [Function],
            },
            "subscribe": [Function],
          },
        },
        "refs": Object {},
        "state": null,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "history": Object {
            "push": [Function],
          },
          "subscribe": [Function],
        },
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <RenderMenuContainer
          dispatch={[Function]}
          history={
            Object {
              "push": [Function],
            }
          }
          menus={
            Object {
              "description": "This is a test menu",
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meals": Array [
                Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
              ],
              "name": "Test Menu",
            }
          }
        />,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "history": Object {
            "push": [Function],
          },
          "subscribe": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": RenderMenuContainer {
          "_reactInternalFiber": FiberNode {
            "_debugID": 6,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "alternate": null,
            "child": null,
            "effectTag": 5,
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "memoizedState": Object {
              "menu": undefined,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "dispatch": [Function],
              "history": Object {
                "push": [Function],
              },
              "menus": Object {
                "description": "This is a test menu",
                "kitchen": Object {
                  "description": "This is my test menu",
                  "id": 3,
                  "name": "This is great",
                },
                "meals": Array [
                  Object {
                    "description": "",
                    "kitchenId": 2,
                    "name": "This is a menu",
                    "price": 5000,
                  },
                ],
                "name": "Test Menu",
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 5,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 4,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": null,
                "child": [Circular],
                "effectTag": 1,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RenderMenuContainer
                      dispatch={[Function]}
                      history={
                        Object {
                          "push": [Function],
                        }
                      }
                      menus={
                        Object {
                          "description": "This is a test menu",
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meals": Array [
                            Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                          ],
                          "name": "Test Menu",
                        }
                      }
                    />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "subscribe": [Function],
                    },
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <RenderMenuContainer
                      dispatch={[Function]}
                      history={
                        Object {
                          "push": [Function],
                        }
                      }
                      menus={
                        Object {
                          "description": "This is a test menu",
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meals": Array [
                            Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                          ],
                          "name": "Test Menu",
                        }
                      }
                    />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "subscribe": [Function],
                    },
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RenderMenuContainer
                      dispatch={[Function]}
                      history={
                        Object {
                          "push": [Function],
                        }
                      }
                      menus={
                        Object {
                          "description": "This is a test menu",
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meals": Array [
                            Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                          ],
                          "name": "Test Menu",
                        }
                      }
                    />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "subscribe": [Function],
                    },
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 1,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": FiberNode {
                    "_debugID": 1,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": [Circular],
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseTime": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div />,
                      "context": Object {},
                      "current": [Circular],
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "remainingExpirationTime": 0,
                    },
                    "tag": 3,
                    "treeBaseTime": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "expirationTime": 1,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RenderMenuContainer
                                  dispatch={[Function]}
                                  history={
                                    Object {
                                      "push": [Function],
                                    }
                                  }
                                  menus={
                                    Object {
                                      "description": "This is a test menu",
                                      "kitchen": Object {
                                        "description": "This is my test menu",
                                        "id": 3,
                                        "name": "This is great",
                                      },
                                      "meals": Array [
                                        Object {
                                          "description": "",
                                          "kitchenId": 2,
                                          "name": "This is a menu",
                                          "price": 5000,
                                        },
                                      ],
                                      "name": "Test Menu",
                                    }
                                  }
                                />,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "history": Object {
                                    "push": [Function],
                                  },
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RenderMenuContainer
                                  dispatch={[Function]}
                                  history={
                                    Object {
                                      "push": [Function],
                                    }
                                  }
                                  menus={
                                    Object {
                                      "description": "This is a test menu",
                                      "kitchen": Object {
                                        "description": "This is my test menu",
                                        "id": 3,
                                        "name": "This is great",
                                      },
                                      "meals": Array [
                                        Object {
                                          "description": "",
                                          "kitchenId": 2,
                                          "name": "This is a menu",
                                          "price": 5000,
                                        },
                                      ],
                                      "name": "Test Menu",
                                    }
                                  }
                                />,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "history": Object {
                                    "push": [Function],
                                  },
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RenderMenuContainer
                            dispatch={[Function]}
                            history={
                              Object {
                                "push": [Function],
                              }
                            }
                            menus={
                              Object {
                                "description": "This is a test menu",
                                "kitchen": Object {
                                  "description": "This is my test menu",
                                  "id": 3,
                                  "name": "This is great",
                                },
                                "meals": Array [
                                  Object {
                                    "description": "",
                                    "kitchenId": 2,
                                    "name": "This is a menu",
                                    "price": 5000,
                                  },
                                ],
                                "name": "Test Menu",
                              }
                            }
                          />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "history": Object {
                              "push": [Function],
                            },
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseTime": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div />,
                    "context": Object {},
                    "current": [Circular],
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "remainingExpirationTime": 0,
                  },
                  "tag": 3,
                  "treeBaseTime": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RenderMenuContainer
                              dispatch={[Function]}
                              history={
                                Object {
                                  "push": [Function],
                                }
                              }
                              menus={
                                Object {
                                  "description": "This is a test menu",
                                  "kitchen": Object {
                                    "description": "This is my test menu",
                                    "id": 3,
                                    "name": "This is great",
                                  },
                                  "meals": Array [
                                    Object {
                                      "description": "",
                                      "kitchenId": 2,
                                      "name": "This is a menu",
                                      "price": 5000,
                                    },
                                  ],
                                  "name": "Test Menu",
                                }
                              }
                            />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "history": Object {
                                "push": [Function],
                              },
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "expirationTime": 0,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseTime": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <RenderMenuContainer
                        dispatch={[Function]}
                        history={
                          Object {
                            "push": [Function],
                          }
                        }
                        menus={
                          Object {
                            "description": "This is a test menu",
                            "kitchen": Object {
                              "description": "This is my test menu",
                              "id": 3,
                              "name": "This is great",
                            },
                            "meals": Array [
                              Object {
                                "description": "",
                                "kitchenId": 2,
                                "name": "This is a menu",
                                "price": 5000,
                              },
                            ],
                            "name": "Test Menu",
                          }
                        }
                      />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "history": Object {
                          "push": [Function],
                        },
                        "subscribe": [Function],
                      },
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <RenderMenuContainer
                        dispatch={[Function]}
                        history={
                          Object {
                            "push": [Function],
                          }
                        }
                        menus={
                          Object {
                            "description": "This is a test menu",
                            "kitchen": Object {
                              "description": "This is my test menu",
                              "id": 3,
                              "name": "This is great",
                            },
                            "meals": Array [
                              Object {
                                "description": "",
                                "kitchenId": 2,
                                "name": "This is a menu",
                                "price": 5000,
                              },
                            ],
                            "name": "Test Menu",
                          }
                        }
                      />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "history": Object {
                          "push": [Function],
                        },
                        "subscribe": [Function],
                      },
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseTime": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "alternate": null,
              "child": [Circular],
              "effectTag": 1,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "children": <RenderMenuContainer
                  dispatch={[Function]}
                  history={
                    Object {
                      "push": [Function],
                    }
                  }
                  menus={
                    Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    }
                  }
                />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <RenderMenuContainer
                  dispatch={[Function]}
                  history={
                    Object {
                      "push": [Function],
                    }
                  }
                  menus={
                    Object {
                      "description": "This is a test menu",
                      "kitchen": Object {
                        "description": "This is my test menu",
                        "id": 3,
                        "name": "This is great",
                      },
                      "meals": Array [
                        Object {
                          "description": "",
                          "kitchenId": 2,
                          "name": "This is a menu",
                          "price": 5000,
                        },
                      ],
                      "name": "Test Menu",
                    }
                  }
                />,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 4,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "alternate": null,
                "child": [Circular],
                "effectTag": 1,
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RenderMenuContainer
                      dispatch={[Function]}
                      history={
                        Object {
                          "push": [Function],
                        }
                      }
                      menus={
                        Object {
                          "description": "This is a test menu",
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meals": Array [
                            Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                          ],
                          "name": "Test Menu",
                        }
                      }
                    />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "subscribe": [Function],
                    },
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <RenderMenuContainer
                      dispatch={[Function]}
                      history={
                        Object {
                          "push": [Function],
                        }
                      }
                      menus={
                        Object {
                          "description": "This is a test menu",
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meals": Array [
                            Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                          ],
                          "name": "Test Menu",
                        }
                      }
                    />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "subscribe": [Function],
                    },
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <RenderMenuContainer
                      dispatch={[Function]}
                      history={
                        Object {
                          "push": [Function],
                        }
                      }
                      menus={
                        Object {
                          "description": "This is a test menu",
                          "kitchen": Object {
                            "description": "This is my test menu",
                            "id": 3,
                            "name": "This is great",
                          },
                          "meals": Array [
                            Object {
                              "description": "",
                              "kitchenId": 2,
                              "name": "This is a menu",
                              "price": 5000,
                            },
                          ],
                          "name": "Test Menu",
                        }
                      }
                    />,
                    "store": Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "history": Object {
                        "push": [Function],
                      },
                      "subscribe": [Function],
                    },
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 1,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "alternate": FiberNode {
                    "_debugID": 1,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "alternate": [Circular],
                    "child": null,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseTime": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div />,
                      "context": Object {},
                      "current": [Circular],
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "remainingExpirationTime": 0,
                    },
                    "tag": 3,
                    "treeBaseTime": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "expirationTime": 1,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RenderMenuContainer
                                  dispatch={[Function]}
                                  history={
                                    Object {
                                      "push": [Function],
                                    }
                                  }
                                  menus={
                                    Object {
                                      "description": "This is a test menu",
                                      "kitchen": Object {
                                        "description": "This is my test menu",
                                        "id": 3,
                                        "name": "This is great",
                                      },
                                      "meals": Array [
                                        Object {
                                          "description": "",
                                          "kitchenId": 2,
                                          "name": "This is a menu",
                                          "price": 5000,
                                        },
                                      ],
                                      "name": "Test Menu",
                                    }
                                  }
                                />,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "history": Object {
                                    "push": [Function],
                                  },
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <RenderMenuContainer
                                  dispatch={[Function]}
                                  history={
                                    Object {
                                      "push": [Function],
                                    }
                                  }
                                  menus={
                                    Object {
                                      "description": "This is a test menu",
                                      "kitchen": Object {
                                        "description": "This is my test menu",
                                        "id": 3,
                                        "name": "This is great",
                                      },
                                      "meals": Array [
                                        Object {
                                          "description": "",
                                          "kitchenId": 2,
                                          "name": "This is a menu",
                                          "price": 5000,
                                        },
                                      ],
                                      "name": "Test Menu",
                                    }
                                  }
                                />,
                                "store": Object {
                                  "dispatch": [Function],
                                  "getState": [Function],
                                  "history": Object {
                                    "push": [Function],
                                  },
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <RenderMenuContainer
                            dispatch={[Function]}
                            history={
                              Object {
                                "push": [Function],
                              }
                            }
                            menus={
                              Object {
                                "description": "This is a test menu",
                                "kitchen": Object {
                                  "description": "This is my test menu",
                                  "id": 3,
                                  "name": "This is great",
                                },
                                "meals": Array [
                                  Object {
                                    "description": "",
                                    "kitchenId": 2,
                                    "name": "This is a menu",
                                    "price": 5000,
                                  },
                                ],
                                "name": "Test Menu",
                              }
                            }
                          />,
                          "store": Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "history": Object {
                              "push": [Function],
                            },
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseTime": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div />,
                    "context": Object {},
                    "current": [Circular],
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "remainingExpirationTime": 0,
                  },
                  "tag": 3,
                  "treeBaseTime": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <RenderMenuContainer
                              dispatch={[Function]}
                              history={
                                Object {
                                  "push": [Function],
                                }
                              }
                              menus={
                                Object {
                                  "description": "This is a test menu",
                                  "kitchen": Object {
                                    "description": "This is my test menu",
                                    "id": 3,
                                    "name": "This is great",
                                  },
                                  "meals": Array [
                                    Object {
                                      "description": "",
                                      "kitchenId": 2,
                                      "name": "This is a menu",
                                      "price": 5000,
                                    },
                                  ],
                                  "name": "Test Menu",
                                }
                              }
                            />,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "history": Object {
                                "push": [Function],
                              },
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "expirationTime": 0,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseTime": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <RenderMenuContainer
                        dispatch={[Function]}
                        history={
                          Object {
                            "push": [Function],
                          }
                        }
                        menus={
                          Object {
                            "description": "This is a test menu",
                            "kitchen": Object {
                              "description": "This is my test menu",
                              "id": 3,
                              "name": "This is great",
                            },
                            "meals": Array [
                              Object {
                                "description": "",
                                "kitchenId": 2,
                                "name": "This is a menu",
                                "price": 5000,
                              },
                            ],
                            "name": "Test Menu",
                          }
                        }
                      />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "history": Object {
                          "push": [Function],
                        },
                        "subscribe": [Function],
                      },
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <RenderMenuContainer
                        dispatch={[Function]}
                        history={
                          Object {
                            "push": [Function],
                          }
                        }
                        menus={
                          Object {
                            "description": "This is a test menu",
                            "kitchen": Object {
                              "description": "This is my test menu",
                              "id": 3,
                              "name": "This is great",
                            },
                            "meals": Array [
                              Object {
                                "description": "",
                                "kitchenId": 2,
                                "name": "This is a menu",
                                "price": 5000,
                              },
                            ],
                            "name": "Test Menu",
                          }
                        }
                      />,
                      "store": Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "history": Object {
                          "push": [Function],
                        },
                        "subscribe": [Function],
                      },
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseTime": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseTime": 0,
              "sibling": null,
              "stateNode": Provider {
                "__reactInternalMemoizedMergedChildContext": Object {
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "subscribe": [Function],
                  },
                  "storeSubscription": null,
                },
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "children": <RenderMenuContainer
                    dispatch={[Function]}
                    history={
                      Object {
                        "push": [Function],
                      }
                    }
                    menus={
                      Object {
                        "description": "This is a test menu",
                        "kitchen": Object {
                          "description": "This is my test menu",
                          "id": 3,
                          "name": "This is great",
                        },
                        "meals": Array [
                          Object {
                            "description": "",
                            "kitchenId": 2,
                            "name": "This is a menu",
                            "price": 5000,
                          },
                        ],
                        "name": "Test Menu",
                      }
                    }
                  />,
                  "store": Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "history": Object {
                      "push": [Function],
                    },
                    "subscribe": [Function],
                  },
                },
                "refs": Object {},
                "state": null,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "history": Object {
                    "push": [Function],
                  },
                  "subscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseTime": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "selfBaseTime": 0,
            "sibling": null,
            "stateNode": [Circular],
            "tag": 2,
            "treeBaseTime": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_reactInternalInstance": Object {},
          "componentDidMount": [Function],
          "context": Object {},
          "generateImageFromMenu": [Function],
          "props": Object {
            "dispatch": [Function],
            "history": Object {
              "push": [Function],
            },
            "menus": Object {
              "description": "This is a test menu",
              "kitchen": Object {
                "description": "This is my test menu",
                "id": 3,
                "name": "This is great",
              },
              "meals": Array [
                Object {
                  "description": "",
                  "kitchenId": 2,
                  "name": "This is a menu",
                  "price": 5000,
                },
              ],
              "name": "Test Menu",
            },
          },
          "refs": Object {},
          "render": [Function],
          "state": Object {
            "menu": undefined,
          },
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
        },
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "dispatch": [Function],
          "history": Object {
            "push": [Function],
          },
          "menus": Object {
            "description": "This is a test menu",
            "kitchen": Object {
              "description": "This is my test menu",
              "id": 3,
              "name": "This is great",
            },
            "meals": Array [
              Object {
                "description": "",
                "kitchenId": 2,
                "name": "This is a menu",
                "price": 5000,
              },
            ],
            "name": "Test Menu",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
